[{"id": 1287, "code": "\tpublic static JsonParser getJsonParser() {\n\t\tif (ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", null)) {\n\t\t\treturn new JacksonJsonParser();\n\t\t}\n\t\tif (ClassUtils.isPresent(\"com.google.gson.Gson\", null)) {\n\t\t\treturn new GsonJsonParser();\n\t\t}\n\t\treturn new BasicJsonParser();\n\t}", "summary_tokens": ["static", "factory", "for", "the", "best", "json", "parser", "available", "on", "the", "classpath"]}, {"id": 1288, "code": "\tprotected String getSelfInitializationConfig() {\n\t\treturn findConfig(getStandardConfigLocations());\n\t}", "summary_tokens": ["return", "any", "self", "initialization", "config", "that", "has", "been", "applied"]}, {"id": 1289, "code": "\tprotected String getSpringInitializationConfig() {\n\t\treturn findConfig(getSpringConfigLocations());\n\t}", "summary_tokens": ["return", "any", "spring", "specific", "initialization", "config", "that", "should", "be", "applied"]}, {"id": 1290, "code": "\tprotected String[] getSpringConfigLocations() {\n\t\tString[] locations = getStandardConfigLocations();\n\t\tfor (int i = 0; i < locations.length; i++) {\n\t\t\tString extension = StringUtils.getFilenameExtension(locations[i]);\n\t\t\tlocations[i] = locations[i].substring(0, locations[i].length() - extension.length() - 1) + \"-spring.\"\n\t\t\t\t\t+ extension;\n\t\t}\n\t\treturn locations;\n\t}", "summary_tokens": ["return", "the", "spring", "config", "locations", "for", "this", "system"]}, {"id": 1291, "code": "\tprotected void reinitialize(LoggingInitializationContext initializationContext) {\n\t}", "summary_tokens": ["reinitialize", "the", "logging", "system", "if", "required"]}, {"id": 1292, "code": "\tdefault Log getLog(Log destination) {\n\t\treturn getLog(() -> destination);\n\t}", "summary_tokens": ["create", "a", "new", "deferred", "log", "for", "the", "given", "destination"]}, {"id": 1293, "code": "\tpublic Log getLog(Supplier<Log> destination) {\n\t\tsynchronized (this.lines) {\n\t\t\tDeferredLog logger = new DeferredLog(destination, this.lines);\n\t\t\tthis.loggers.add(logger);\n\t\t\treturn logger;\n\t\t}\n\t}", "summary_tokens": ["create", "a", "new", "deferred", "log", "for", "the", "given", "destination"]}, {"id": 1294, "code": "\tpublic void switchOverAll() {\n\t\tsynchronized (this.lines) {\n\t\t\tfor (Line line : this.lines) {\n\t\t\t\tDeferredLog.logTo(line.getDestination(), line.getLevel(), line.getMessage(), line.getThrowable());\n\t\t\t}\n\t\t\tfor (DeferredLog logger : this.loggers) {\n\t\t\t\tlogger.switchOver();\n\t\t\t}\n\t\t\tthis.lines.clear();\n\t\t}\n\n\t}", "summary_tokens": ["switch", "over", "all", "deferred", "logs", "to", "their", "supplied", "destination"]}, {"id": 1295, "code": "\tpublic void applyToSystemProperties() {\n\t\tapplyTo(System.getProperties());\n\t}", "summary_tokens": ["apply", "log", "file", "details", "to", "log", "path", "and", "log", "file", "system", "properties"]}, {"id": 1296, "code": "\tpublic void applyTo(Properties properties) {\n\t\tput(properties, LoggingSystemProperties.LOG_PATH, this.path);\n\t\tput(properties, LoggingSystemProperties.LOG_FILE, toString());\n\t}", "summary_tokens": ["apply", "log", "file", "details", "to", "log", "path", "and", "log", "file", "map", "entries"]}, {"id": 1297, "code": "\tpublic static LogFile get(PropertyResolver propertyResolver) {\n\t\tString file = propertyResolver.getProperty(FILE_NAME_PROPERTY);\n\t\tString path = propertyResolver.getProperty(FILE_PATH_PROPERTY);\n\t\tif (StringUtils.hasLength(file) || StringUtils.hasLength(path)) {\n\t\t\treturn new LogFile(file, path);\n\t\t}\n\t\treturn null;\n\t}", "summary_tokens": ["get", "a", "log", "file", "from", "the", "given", "spring", "environment"]}, {"id": 1298, "code": "\tpublic Environment getEnvironment() {\n\t\treturn this.environment;\n\t}", "summary_tokens": ["return", "the", "spring", "environment", "if", "available"]}, {"id": 1299, "code": "\tpublic LoggingSystemProperties getSystemProperties(ConfigurableEnvironment environment) {\n\t\treturn new LoggingSystemProperties(environment);\n\t}", "summary_tokens": ["return", "the", "logging", "system", "properties", "that", "should", "be", "applied"]}, {"id": 1300, "code": "\tpublic void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {\n\t}", "summary_tokens": ["fully", "initialize", "the", "logging", "system"]}, {"id": 1301, "code": "\tpublic void cleanUp() {\n\t}", "summary_tokens": ["clean", "up", "the", "logging", "system"]}, {"id": 1302, "code": "\tpublic Runnable getShutdownHandler() {\n\t\treturn null;\n\t}", "summary_tokens": ["returns", "a", "runnable", "that", "can", "handle", "shutdown", "of", "this", "logging", "system", "when", "the", "jvm", "exits"]}, {"id": 1303, "code": "\tpublic Set<LogLevel> getSupportedLogLevels() {\n\t\treturn EnumSet.allOf(LogLevel.class);\n\t}", "summary_tokens": ["returns", "a", "set", "of", "the", "log", "level", "log", "levels", "that", "are", "actually", "supported", "by", "the", "logging", "system"]}, {"id": 1304, "code": "\tpublic void setLogLevel(String loggerName, LogLevel level) {\n\t\tthrow new UnsupportedOperationException(\"Unable to set log level\");\n\t}", "summary_tokens": ["sets", "the", "logging", "level", "for", "a", "given", "logger"]}, {"id": 1305, "code": "\tpublic List<LoggerConfiguration> getLoggerConfigurations() {\n\t\tthrow new UnsupportedOperationException(\"Unable to get logger configurations\");\n\t}", "summary_tokens": ["returns", "a", "collection", "of", "the", "current", "configuration", "for", "all", "a", "logging", "system", "s", "loggers"]}, {"id": 1306, "code": "\tpublic LoggerConfiguration getLoggerConfiguration(String loggerName) {\n\t\tthrow new UnsupportedOperationException(\"Unable to get logger configuration\");\n\t}", "summary_tokens": ["returns", "the", "current", "configuration", "for", "a", "logging", "system", "s", "logger"]}, {"id": 1307, "code": "\tpublic static LoggingSystem get(ClassLoader classLoader) {\n\t\tString loggingSystemClassName = System.getProperty(SYSTEM_PROPERTY);\n\t\tif (StringUtils.hasLength(loggingSystemClassName)) {\n\t\t\tif (NONE.equals(loggingSystemClassName)) {\n\t\t\t\treturn new NoOpLoggingSystem();\n\t\t\t}\n\t\t\treturn get(classLoader, loggingSystemClassName);\n\t\t}\n\t\tLoggingSystem loggingSystem = SYSTEM_FACTORY.getLoggingSystem(classLoader);\n\t\tAssert.state(loggingSystem != null, \"No suitable logging system located\");\n\t\treturn loggingSystem;\n\t}", "summary_tokens": ["detect", "and", "return", "the", "logging", "system", "in", "use"]}, {"id": 1308, "code": "\tstatic LoggingSystemFactory fromSpringFactories() {\n\t\treturn new DelegatingLoggingSystemFactory(\n\t\t\t\t(classLoader) -> SpringFactoriesLoader.loadFactories(LoggingSystemFactory.class, classLoader));\n\t}", "summary_tokens": ["return", "a", "logging", "system", "factory", "backed", "by", "spring"]}, {"id": 1309, "code": "\tpublic static ColorConverter newInstance(Configuration config, String[] options) {\n\t\tif (options.length < 1) {\n\t\t\tLOGGER.error(\"Incorrect number of options on style. Expected at least 1, received {}\", options.length);\n\t\t\treturn null;\n\t\t}\n\t\tif (options[0] == null) {\n\t\t\tLOGGER.error(\"No pattern supplied on style\");\n\t\t\treturn null;\n\t\t}\n\t\tPatternParser parser = PatternLayout.createPatternParser(config);\n\t\tList<PatternFormatter> formatters = parser.parse(options[0]);\n\t\tAnsiElement element = (options.length != 1) ? ELEMENTS.get(options[1]) : null;\n\t\treturn new ColorConverter(formatters, element);\n\t}", "summary_tokens": ["creates", "a", "new", "instance", "of", "the", "class"]}, {"id": 1310, "code": "\tpublic static ExtendedWhitespaceThrowablePatternConverter newInstance(Configuration configuration,\n\t\t\tString[] options) {\n\t\treturn new ExtendedWhitespaceThrowablePatternConverter(configuration, options);\n\t}", "summary_tokens": ["creates", "a", "new", "instance", "of", "the", "class"]}, {"id": 1311, "code": "\tpublic static WhitespaceThrowablePatternConverter newInstance(Configuration configuration, String[] options) {\n\t\treturn new WhitespaceThrowablePatternConverter(configuration, options);\n\t}", "summary_tokens": ["creates", "a", "new", "instance", "of", "the", "class"]}, {"id": 1312, "code": "\tdefault boolean isImmutable() {\n\t\treturn false;\n\t}", "summary_tokens": ["return", "true", "if", "this", "lookup", "is", "immutable", "and", "has", "contents", "that", "will", "never", "change"]}, {"id": 1313, "code": "\tdefault String getPrefix() {\n\t\treturn null;\n\t}", "summary_tokens": ["return", "the", "implicit", "prefix", "that", "is", "applied", "when", "performing", "a", "lookup", "or", "null", "if", "no", "prefix", "is", "used"]}, {"id": 1314, "code": "\tstatic <K> Origin getOrigin(Object source, K key) {\n\t\tif (!(source instanceof OriginLookup)) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn ((OriginLookup<K>) source).getOrigin(key);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "summary_tokens": ["attempt", "to", "look", "up", "the", "origin", "from", "the", "given", "source"]}, {"id": 1315, "code": "\tpublic PropertySource<?> getPropertySource() {\n\t\treturn this.propertySource;\n\t}", "summary_tokens": ["return", "the", "origin", "property", "source"]}, {"id": 1316, "code": "\tpublic String getPropertyName() {\n\t\treturn this.propertyName;\n\t}", "summary_tokens": ["return", "the", "property", "name", "that", "was", "used", "when", "obtaining", "the", "original", "value", "from", "the", "get", "property", "source", "property", "source"]}, {"id": 1317, "code": "\tpublic static Origin get(PropertySource<?> propertySource, String name) {\n\t\tOrigin origin = OriginLookup.getOrigin(propertySource, name);\n\t\treturn (origin != null) ? origin : new PropertySourceOrigin(propertySource, name);\n\t}", "summary_tokens": ["get", "an", "origin", "for", "the", "given", "property", "source", "and", "property", "name"]}, {"id": 1318, "code": "\tpublic void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {\n\t\tthis.bootstrapExecutor = bootstrapExecutor;\n\t}", "summary_tokens": ["configure", "the", "bootstrap", "executor", "to", "be", "used", "by", "the", "local", "container", "entity", "manager", "factory", "bean"]}, {"id": 1319, "code": "\tpublic void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... persistenceUnitPostProcessors) {\n\t\tthis.persistenceUnitPostProcessors = persistenceUnitPostProcessors;\n\t}", "summary_tokens": ["set", "the", "persistence", "unit", "post", "processor", "persistence", "unit", "post", "processors", "to", "be", "applied", "to", "the", "persistence", "unit", "info", "used", "for", "creating", "the", "local", "container", "entity", "manager", "factory", "bean"]}, {"id": 1320, "code": "\tpublic static OptionsCapableConnectionFactory unwrapFrom(ConnectionFactory connectionFactory) {\n\t\tif (connectionFactory instanceof OptionsCapableConnectionFactory) {\n\t\t\treturn (OptionsCapableConnectionFactory) connectionFactory;\n\t\t}\n\t\tif (connectionFactory instanceof Wrapped) {\n\t\t\tObject unwrapped = ((Wrapped<?>) connectionFactory).unwrap();\n\t\t\tif (unwrapped instanceof ConnectionFactory) {\n\t\t\t\treturn unwrapFrom((ConnectionFactory) unwrapped);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\n\t}", "summary_tokens": ["returns", "if", "possible", "an", "options", "capable", "connection", "factory", "by", "unwrapping", "the", "given", "connection", "factory", "as", "necessary"]}, {"id": 1321, "code": "\tpublic RSocketServer getServer() {\n\t\treturn getSource();\n\t}", "summary_tokens": ["access", "the", "rsocket", "server"]}, {"id": 1322, "code": "\tpublic RSocketServer getSource() {\n\t\treturn (RSocketServer) super.getSource();\n\t}", "summary_tokens": ["access", "the", "source", "of", "the", "event", "an", "rsocket", "server"]}, {"id": 1323, "code": "\tpublic void setResourceFactory(ReactorResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}", "summary_tokens": ["set", "the", "reactor", "resource", "factory", "to", "get", "the", "shared", "resources", "from"]}, {"id": 1324, "code": "\tpublic void setRSocketServerCustomizers(Collection<? extends RSocketServerCustomizer> rSocketServerCustomizers) {\n\t\tAssert.notNull(rSocketServerCustomizers, \"RSocketServerCustomizers must not be null\");\n\t\tthis.rSocketServerCustomizers = new ArrayList<>(rSocketServerCustomizers);\n\t}", "summary_tokens": ["set", "rsocket", "server", "customizer", "s", "that", "should", "be", "called", "to", "configure", "the", "io"]}, {"id": 1325, "code": "\tpublic void addRSocketServerCustomizers(RSocketServerCustomizer... rSocketServerCustomizers) {\n\t\tAssert.notNull(rSocketServerCustomizers, \"RSocketServerCustomizers must not be null\");\n\t\tthis.rSocketServerCustomizers.addAll(Arrays.asList(rSocketServerCustomizers));\n\t}", "summary_tokens": ["add", "rsocket", "server", "customizer", "s", "that", "should", "be", "called", "to", "configure", "the", "io"]}, {"id": 1326, "code": "\tpublic void setLifecycleTimeout(Duration lifecycleTimeout) {\n\t\tthis.lifecycleTimeout = lifecycleTimeout;\n\t}", "summary_tokens": ["set", "the", "maximum", "amount", "of", "time", "that", "should", "be", "waited", "when", "starting", "or", "stopping", "the", "server"]}, {"id": 1327, "code": "\tprotected boolean ignoreApplicationContext(ApplicationContext applicationContext) {\n\t\treturn false;\n\t}", "summary_tokens": ["returns", "if", "the", "application", "context", "should", "be", "ignored", "and", "not", "used", "for", "matching"]}, {"id": 1328, "code": "\tprotected void initialized(Supplier<C> context) {\n\t}", "summary_tokens": ["called", "once", "the", "context", "has", "been", "initialized"]}, {"id": 1329, "code": "\tprotected boolean ignoreApplicationContext(WebApplicationContext webApplicationContext) {\n\t\treturn false;\n\t}", "summary_tokens": ["returns", "if", "the", "web", "application", "context", "should", "be", "ignored", "and", "not", "used", "for", "matching"]}, {"id": 1330, "code": "\tprotected void initialized(Supplier<C> context) {\n\t}", "summary_tokens": ["method", "that", "can", "be", "implemented", "by", "subclasses", "that", "wish", "to", "initialize", "items", "the", "first", "time", "that", "the", "matcher", "is", "called"]}, {"id": 1331, "code": "\tpublic boolean initializeDatabase() {\n\t\tScriptLocationResolver locationResolver = new ScriptLocationResolver(this.resourceLoader);\n\t\tboolean initialized = applySchemaScripts(locationResolver);\n\t\treturn applyDataScripts(locationResolver) || initialized;\n\t}", "summary_tokens": ["initializes", "the", "database", "by", "applying", "schema", "and", "data", "scripts"]}, {"id": 1332, "code": "\tprotected boolean isEmbeddedDatabase() {\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"Database initialization mode is '\" + this.settings.getMode() + \"' and database type is unknown\");\n\t}", "summary_tokens": ["returns", "whether", "the", "database", "that", "is", "to", "be", "initialized", "is", "embedded"]}, {"id": 1333, "code": "\tpublic List<String> getSchemaLocations() {\n\t\treturn this.schemaLocations;\n\t}", "summary_tokens": ["returns", "the", "locations", "of", "the", "schema", "ddl", "scripts", "to", "apply", "to", "the", "database"]}, {"id": 1334, "code": "\tpublic void setSchemaLocations(List<String> schemaLocations) {\n\t\tthis.schemaLocations = schemaLocations;\n\t}", "summary_tokens": ["sets", "the", "locations", "of", "schema", "ddl", "scripts", "to", "apply", "to", "the", "database"]}, {"id": 1335, "code": "\tpublic List<String> getDataLocations() {\n\t\treturn this.dataLocations;\n\t}", "summary_tokens": ["returns", "the", "locations", "of", "data", "dml", "scripts", "to", "apply", "to", "the", "database"]}, {"id": 1336, "code": "\tpublic void setDataLocations(List<String> dataLocations) {\n\t\tthis.dataLocations = dataLocations;\n\t}", "summary_tokens": ["sets", "the", "locations", "of", "data", "dml", "scripts", "to", "apply", "to", "the", "database"]}, {"id": 1337, "code": "\tpublic boolean isContinueOnError() {\n\t\treturn this.continueOnError;\n\t}", "summary_tokens": ["returns", "whether", "to", "continue", "when", "an", "error", "occurs", "while", "applying", "a", "schema", "or", "data", "script"]}, {"id": 1338, "code": "\tpublic void setContinueOnError(boolean continueOnError) {\n\t\tthis.continueOnError = continueOnError;\n\t}", "summary_tokens": ["sets", "whether", "initialization", "should", "continue", "when", "an", "error", "occurs", "when", "applying", "a", "schema", "or", "data", "script"]}, {"id": 1339, "code": "\tpublic String getSeparator() {\n\t\treturn this.separator;\n\t}", "summary_tokens": ["returns", "the", "statement", "separator", "used", "in", "the", "schema", "and", "data", "scripts"]}, {"id": 1340, "code": "\tpublic void setSeparator(String separator) {\n\t\tthis.separator = separator;\n\t}", "summary_tokens": ["sets", "the", "statement", "separator", "to", "use", "when", "reading", "the", "schema", "and", "data", "scripts"]}, {"id": 1341, "code": "\tpublic Charset getEncoding() {\n\t\treturn this.encoding;\n\t}", "summary_tokens": ["returns", "the", "encoding", "to", "use", "when", "reading", "the", "schema", "and", "data", "scripts"]}, {"id": 1342, "code": "\tpublic void setEncoding(Charset encoding) {\n\t\tthis.encoding = encoding;\n\t}", "summary_tokens": ["sets", "the", "encoding", "to", "use", "when", "reading", "the", "schema", "and", "data", "scripts"]}, {"id": 1343, "code": "\tpublic DatabaseInitializationMode getMode() {\n\t\treturn this.mode;\n\t}", "summary_tokens": ["gets", "the", "mode", "to", "use", "when", "determining", "whether", "database", "initialization", "should", "be", "performed"]}, {"id": 1344, "code": "\tpublic void setMode(DatabaseInitializationMode mode) {\n\t\tthis.mode = mode;\n\t}", "summary_tokens": ["sets", "the", "mode", "the", "use", "when", "determining", "whether", "database", "initialization", "should", "be", "performed"]}, {"id": 1345, "code": "\tdefault void detectionComplete(ConfigurableListableBeanFactory beanFactory,\n\t\t\tSet<String> dataSourceInitializerNames) {\n\t}", "summary_tokens": ["callback", "indicating", "that", "all", "known", "data", "source", "initializer", "detectors", "have", "been", "called", "and", "detection", "of", "beans", "that", "initialize", "a", "data", "source", "is", "complete"]}, {"id": 1346, "code": "\tpublic TaskExecutorBuilder queueCapacity(int queueCapacity) {\n\t\treturn new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize, this.allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "capacity", "of", "the", "queue"]}, {"id": 1347, "code": "\tpublic TaskExecutorBuilder corePoolSize(int corePoolSize) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize, this.allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "core", "number", "of", "threads"]}, {"id": 1348, "code": "\tpublic TaskExecutorBuilder maxPoolSize(int maxPoolSize) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize, this.allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "maximum", "allowed", "number", "of", "threads"]}, {"id": 1349, "code": "\tpublic TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize, allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "whether", "core", "threads", "are", "allowed", "to", "time", "out"]}, {"id": 1350, "code": "\tpublic TaskExecutorBuilder keepAlive(Duration keepAlive) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "time", "limit", "for", "which", "threads", "may", "remain", "idle", "before", "being", "terminated"]}, {"id": 1351, "code": "\tpublic TaskExecutorBuilder awaitTermination(boolean awaitTermination) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "whether", "the", "executor", "should", "wait", "for", "scheduled", "tasks", "to", "complete", "on", "shutdown", "not", "interrupting", "running", "tasks", "and", "executing", "all", "tasks", "in", "the", "queue"]}, {"id": 1352, "code": "\tpublic TaskExecutorBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "maximum", "time", "the", "executor", "is", "supposed", "to", "block", "on", "shutdown"]}, {"id": 1353, "code": "\tpublic TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthreadNamePrefix, this.taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "prefix", "to", "use", "for", "the", "names", "of", "newly", "created", "threads"]}, {"id": 1354, "code": "\tpublic TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, taskDecorator, this.customizers);\n\t}", "summary_tokens": ["set", "the", "task", "decorator", "to", "use", "or", "null", "to", "not", "use", "any"]}, {"id": 1355, "code": "\tpublic TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, append(null, customizers));\n\t}", "summary_tokens": ["set", "the", "task", "executor", "customizer", "task", "executor", "customizers", "that", "should", "be", "applied", "to", "the", "thread", "pool", "task", "executor"]}, {"id": 1356, "code": "\tpublic TaskExecutorBuilder additionalCustomizers(Iterable<TaskExecutorCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, append(this.customizers, customizers));\n\t}", "summary_tokens": ["add", "task", "executor", "customizer", "task", "executor", "customizers", "that", "should", "be", "applied", "to", "the", "thread", "pool", "task", "executor"]}, {"id": 1357, "code": "\tpublic <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {\n\t\treturn configure(BeanUtils.instantiateClass(taskExecutorClass));\n\t}", "summary_tokens": ["build", "a", "new", "thread", "pool", "task", "executor", "instance", "of", "the", "specified", "type", "and", "configure", "it", "using", "this", "builder"]}, {"id": 1358, "code": "\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds).to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination).to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).as(Duration::toMillis).to(taskExecutor::setAwaitTerminationMillis);\n\t\tmap.from(this.threadNamePrefix).whenHasText().to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}", "summary_tokens": ["configure", "the", "provided", "thread", "pool", "task", "executor", "instance", "using", "this", "builder"]}, {"id": 1359, "code": "\tpublic TaskSchedulerBuilder poolSize(int poolSize) {\n\t\treturn new TaskSchedulerBuilder(poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.customizers);\n\t}", "summary_tokens": ["set", "the", "maximum", "allowed", "number", "of", "threads"]}, {"id": 1360, "code": "\tpublic TaskSchedulerBuilder awaitTermination(boolean awaitTermination) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.customizers);\n\t}", "summary_tokens": ["set", "whether", "the", "executor", "should", "wait", "for", "scheduled", "tasks", "to", "complete", "on", "shutdown", "not", "interrupting", "running", "tasks", "and", "executing", "all", "tasks", "in", "the", "queue"]}, {"id": 1361, "code": "\tpublic TaskSchedulerBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.customizers);\n\t}", "summary_tokens": ["set", "the", "maximum", "time", "the", "executor", "is", "supposed", "to", "block", "on", "shutdown"]}, {"id": 1362, "code": "\tpublic TaskSchedulerBuilder threadNamePrefix(String threadNamePrefix) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthreadNamePrefix, this.customizers);\n\t}", "summary_tokens": ["set", "the", "prefix", "to", "use", "for", "the", "names", "of", "newly", "created", "threads"]}, {"id": 1363, "code": "\tpublic TaskSchedulerBuilder customizers(Iterable<TaskSchedulerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, append(null, customizers));\n\t}", "summary_tokens": ["set", "the", "task", "scheduler", "customizer", "task", "scheduler", "customizers", "that", "should", "be", "applied", "to", "the", "thread", "pool", "task", "scheduler"]}, {"id": 1364, "code": "\tpublic TaskSchedulerBuilder additionalCustomizers(Iterable<TaskSchedulerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, append(this.customizers, customizers));\n\t}", "summary_tokens": ["add", "task", "scheduler", "customizer", "task", "scheduler", "customizers", "that", "should", "be", "applied", "to", "the", "thread", "pool", "task", "scheduler"]}, {"id": 1365, "code": "\tpublic ThreadPoolTaskScheduler build() {\n\t\treturn configure(new ThreadPoolTaskScheduler());\n\t}", "summary_tokens": ["build", "a", "new", "thread", "pool", "task", "scheduler", "instance", "and", "configure", "it", "using", "this", "builder"]}, {"id": 1366, "code": "\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination).to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds).to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}", "summary_tokens": ["configure", "the", "provided", "thread", "pool", "task", "scheduler", "instance", "using", "this", "builder"]}, {"id": 1367, "code": "\tprotected MetadataReader createMetadataReader(Resource resource) throws IOException {\n\t\treturn super.getMetadataReader(resource);\n\t}", "summary_tokens": ["create", "the", "meta", "data", "reader"]}, {"id": 1368, "code": "\tpublic void clearCache() {\n\t\tthis.cache.clear();\n\t}", "summary_tokens": ["clear", "the", "entire", "metadata", "reader", "cache", "removing", "all", "cached", "class", "metadata"]}, {"id": 1369, "code": "\tpublic List<T> instantiate(ClassLoader classLoader, Collection<String> names) {\n\t\tAssert.notNull(names, \"Names must not be null\");\n\t\treturn instantiate(names.stream().map((name) -> TypeSupplier.forName(classLoader, name)));\n\t}", "summary_tokens": ["instantiate", "the", "given", "set", "of", "class", "name", "injecting", "constructor", "arguments", "as", "necessary"]}, {"id": 1370, "code": "\tpublic List<T> instantiateTypes(Collection<Class<?>> types) {\n\t\tAssert.notNull(types, \"Types must not be null\");\n\t\treturn instantiate(types.stream().map(TypeSupplier::forType));\n\t}", "summary_tokens": ["instantiate", "the", "given", "set", "of", "classes", "injecting", "constructor", "arguments", "as", "necessary"]}, {"id": 1371, "code": "\tpublic static <C, A> Callback<C, A> callback(Class<C> callbackType, C callbackInstance, A argument,\n\t\t\tObject... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstance, \"CallbackInstance must not be null\");\n\t\treturn new Callback<>(callbackType, callbackInstance, argument, additionalArguments);\n\t}", "summary_tokens": ["start", "a", "call", "to", "a", "single", "callback", "instance", "dealing", "with", "common", "generic", "type", "concerns", "and", "exceptions"]}, {"id": 1372, "code": "\tpublic static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, Collection<? extends C> callbackInstances,\n\t\t\tA argument, Object... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstances, \"CallbackInstances must not be null\");\n\t\treturn new Callbacks<>(callbackType, callbackInstances, argument, additionalArguments);\n\t}", "summary_tokens": ["start", "a", "call", "to", "callback", "instances", "dealing", "with", "common", "generic", "type", "concerns", "and", "exceptions"]}, {"id": 1373, "code": "\tprivate String replaceParameters(String message, Locale locale) {\n\t\treturn replaceParameters(message, locale, new LinkedHashSet<>(4));\n\t}", "summary_tokens": ["recursively", "replaces", "all", "message", "parameters"]}, {"id": 1374, "code": "\tstatic MethodValidationExcludeFilter byAnnotation(Class<? extends Annotation> annotationType,\n\t\t\tSearchStrategy searchStrategy) {\n\t\treturn (type) -> MergedAnnotations.from(type, searchStrategy).isPresent(annotationType);\n\t}", "summary_tokens": ["factory", "method", "to", "create", "a", "method", "validation", "exclude", "filter", "that", "excludes", "classes", "by", "annotation", "found", "using", "the", "given", "search", "strategy"]}, {"id": 1375, "code": "\tpublic RestTemplateBuilder detectRequestFactory(boolean detectRequestFactory) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}", "summary_tokens": ["set", "if", "the", "client", "http", "request", "factory", "should", "be", "detected", "based", "on", "the", "classpath"]}, {"id": 1376, "code": "\tpublic RestTemplateBuilder rootUri(String rootUri) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}", "summary_tokens": ["set", "a", "root", "url", "that", "should", "be", "applied", "to", "each", "request", "that", "starts", "with"]}, {"id": 1377, "code": "\tpublic RestTemplateBuilder messageConverters(Collection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tcopiedSetOf(messageConverters), this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "http", "message", "converter", "http", "message", "converters", "that", "should", "be", "used", "with", "the", "rest", "template"]}, {"id": 1378, "code": "\tpublic RestTemplateBuilder additionalMessageConverters(\n\t\t\tCollection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tappend(this.messageConverters, messageConverters), this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["add", "additional", "http", "message", "converter", "http", "message", "converters", "that", "should", "be", "used", "with", "the", "rest", "template"]}, {"id": 1379, "code": "\tpublic RestTemplateBuilder defaultMessageConverters() {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tcopiedSetOf(new RestTemplate().getMessageConverters()), this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "http", "message", "converter", "http", "message", "converters", "that", "should", "be", "used", "with", "the", "rest", "template", "to", "the", "default", "set"]}, {"id": 1380, "code": "\tpublic RestTemplateBuilder interceptors(Collection<ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, copiedSetOf(interceptors), this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "client", "http", "request", "interceptor", "client", "http", "request", "interceptors", "that", "should", "be", "used", "with", "the", "rest", "template"]}, {"id": 1381, "code": "\tpublic RestTemplateBuilder additionalInterceptors(Collection<? extends ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, append(this.interceptors, interceptors), this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["add", "additional", "client", "http", "request", "interceptor", "client", "http", "request", "interceptors", "that", "should", "be", "used", "with", "the", "rest", "template"]}, {"id": 1382, "code": "\tpublic RestTemplateBuilder requestFactory(Supplier<ClientHttpRequestFactory> requestFactory) {\n\t\tAssert.notNull(requestFactory, \"RequestFactory Supplier must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, requestFactory, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.defaultHeaders, this.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "supplier", "of", "client", "http", "request", "factory", "that", "should", "be", "called", "each", "time", "we", "build", "a", "new", "rest", "template", "instance"]}, {"id": 1383, "code": "\tpublic RestTemplateBuilder uriTemplateHandler(UriTemplateHandler uriTemplateHandler) {\n\t\tAssert.notNull(uriTemplateHandler, \"UriTemplateHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.defaultHeaders, this.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "uri", "template", "handler", "that", "should", "be", "used", "with", "the", "rest", "template"]}, {"id": 1384, "code": "\tpublic RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {\n\t\tAssert.notNull(errorHandler, \"ErrorHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler, errorHandler,\n\t\t\t\tthis.basicAuthentication, this.defaultHeaders, this.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "response", "error", "handler", "that", "should", "be", "used", "with", "the", "rest", "template"]}, {"id": 1385, "code": "\tpublic RestTemplateBuilder basicAuthentication(String username, String password, Charset charset) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, new BasicAuthentication(username, password, charset), this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["add", "http", "basic", "authentication", "to", "requests", "with", "the", "given", "username", "password", "pair", "unless", "a", "custom", "authorization", "header", "has", "been", "set", "before"]}, {"id": 1386, "code": "\tpublic RestTemplateBuilder defaultHeader(String name, String... values) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(values, \"Values must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, append(this.defaultHeaders, name, values),\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["add", "a", "default", "header", "that", "will", "be", "set", "if", "not", "already", "present", "on", "the", "outgoing", "http", "client", "request"]}, {"id": 1387, "code": "\tpublic RestTemplateBuilder setConnectTimeout(Duration connectTimeout) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer.connectTimeout(connectTimeout),\n\t\t\t\tthis.detectRequestFactory, this.rootUri, this.messageConverters, this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["sets", "the", "connection", "timeout", "on", "the", "underlying", "client", "http", "request", "factory"]}, {"id": 1388, "code": "\tpublic RestTemplateBuilder setReadTimeout(Duration readTimeout) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer.readTimeout(readTimeout),\n\t\t\t\tthis.detectRequestFactory, this.rootUri, this.messageConverters, this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["sets", "the", "read", "timeout", "on", "the", "underlying", "client", "http", "request", "factory"]}, {"id": 1389, "code": "\tpublic RestTemplateBuilder setBufferRequestBody(boolean bufferRequestBody) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer.bufferRequestBody(bufferRequestBody),\n\t\t\t\tthis.detectRequestFactory, this.rootUri, this.messageConverters, this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}", "summary_tokens": ["sets", "if", "the", "underlying", "client", "http", "request", "factory", "should", "buffer", "the", "client", "http", "request", "get", "body", "request", "body", "internally"]}, {"id": 1390, "code": "\tpublic RestTemplateBuilder customizers(Collection<? extends RestTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, copiedSetOf(customizers),\n\t\t\t\tthis.requestCustomizers);\n\t}", "summary_tokens": ["set", "the", "rest", "template", "customizer", "rest", "template", "customizers", "that", "should", "be", "applied", "to", "the", "rest", "template"]}, {"id": 1391, "code": "\tpublic RestTemplateBuilder additionalCustomizers(Collection<? extends RestTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, append(this.customizers, customizers),\n\t\t\t\tthis.requestCustomizers);\n\t}", "summary_tokens": ["add", "rest", "template", "customizer", "rest", "template", "customizers", "that", "should", "be", "applied", "to", "the", "rest", "template"]}, {"id": 1392, "code": "\tpublic RestTemplateBuilder requestCustomizers(\n\t\t\tCollection<? extends RestTemplateRequestCustomizer<?>> requestCustomizers) {\n\t\tAssert.notNull(requestCustomizers, \"RequestCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tcopiedSetOf(requestCustomizers));\n\t}", "summary_tokens": ["set", "the", "rest", "template", "request", "customizer", "rest", "template", "request", "customizers", "that", "should", "be", "applied", "to", "the", "client", "http", "request"]}, {"id": 1393, "code": "\tpublic RestTemplateBuilder additionalRequestCustomizers(\n\t\t\tCollection<? extends RestTemplateRequestCustomizer<?>> requestCustomizers) {\n\t\tAssert.notNull(requestCustomizers, \"RequestCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tappend(this.requestCustomizers, requestCustomizers));\n\t}", "summary_tokens": ["add", "the", "rest", "template", "request", "customizer", "rest", "template", "request", "customizers", "that", "should", "be", "applied", "to", "the", "client", "http", "request"]}, {"id": 1394, "code": "\tpublic <T extends RestTemplate> T build(Class<T> restTemplateClass) {\n\t\treturn configure(BeanUtils.instantiateClass(restTemplateClass));\n\t}", "summary_tokens": ["build", "a", "new", "rest", "template", "instance", "of", "the", "specified", "type", "and", "configure", "it", "using", "this", "builder"]}, {"id": 1395, "code": "\tpublic <T extends RestTemplate> T configure(T restTemplate) {\n\t\tClientHttpRequestFactory requestFactory = buildRequestFactory();\n\t\tif (requestFactory != null) {\n\t\t\trestTemplate.setRequestFactory(requestFactory);\n\t\t}\n\t\taddClientHttpRequestInitializer(restTemplate);\n\t\tif (!CollectionUtils.isEmpty(this.messageConverters)) {\n\t\t\trestTemplate.setMessageConverters(new ArrayList<>(this.messageConverters));\n\t\t}\n\t\tif (this.uriTemplateHandler != null) {\n\t\t\trestTemplate.setUriTemplateHandler(this.uriTemplateHandler);\n\t\t}\n\t\tif (this.errorHandler != null) {\n\t\t\trestTemplate.setErrorHandler(this.errorHandler);\n\t\t}\n\t\tif (this.rootUri != null) {\n\t\t\tRootUriTemplateHandler.addTo(restTemplate, this.rootUri);\n\t\t}\n\t\trestTemplate.getInterceptors().addAll(this.interceptors);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tfor (RestTemplateCustomizer customizer : this.customizers) {\n\t\t\t\tcustomizer.customize(restTemplate);\n\t\t\t}\n\t\t}\n\t\treturn restTemplate;\n\t}", "summary_tokens": ["configure", "the", "provided", "rest", "template", "instance", "using", "this", "builder"]}, {"id": 1396, "code": "\tpublic ClientHttpRequestFactory buildRequestFactory() {\n\t\tClientHttpRequestFactory requestFactory = null;\n\t\tif (this.requestFactory != null) {\n\t\t\trequestFactory = this.requestFactory.get();\n\t\t}\n\t\telse if (this.detectRequestFactory) {\n\t\t\trequestFactory = new ClientHttpRequestFactorySupplier().get();\n\t\t}\n\t\tif (requestFactory != null) {\n\t\t\tif (this.requestFactoryCustomizer != null) {\n\t\t\t\tthis.requestFactoryCustomizer.accept(requestFactory);\n\t\t\t}\n\t\t}\n\t\treturn requestFactory;\n\t}", "summary_tokens": ["build", "a", "new", "client", "http", "request", "factory", "instance", "using", "the", "settings", "of", "this", "builder"]}, {"id": 1397, "code": "\tpublic RootUriTemplateHandler withHandlerWrapper(Function<UriTemplateHandler, UriTemplateHandler> wrapper) {\n\t\treturn new RootUriTemplateHandler(getRootUri(), wrapper.apply(this.handler));\n\t}", "summary_tokens": ["derives", "a", "new", "root", "uri", "template", "handler", "from", "this", "one", "wrapping", "its", "delegate", "uri", "template", "handler", "by", "applying", "the", "given", "wrapper"]}, {"id": 1398, "code": "\tpublic static RootUriTemplateHandler addTo(RestTemplate restTemplate, String rootUri) {\n\t\tAssert.notNull(restTemplate, \"RestTemplate must not be null\");\n\t\tRootUriTemplateHandler handler = new RootUriTemplateHandler(rootUri, restTemplate.getUriTemplateHandler());\n\t\trestTemplate.setUriTemplateHandler(handler);\n\t\treturn handler;\n\t}", "summary_tokens": ["add", "a", "root", "uri", "template", "handler", "instance", "to", "the", "given", "rest", "template"]}, {"id": 1399, "code": "\tpublic WebApplicationType getWebApplicationType() {\n\t\treturn this.webApplicationType;\n\t}", "summary_tokens": ["returns", "the", "type", "of", "web", "application", "for", "which", "a", "web", "server", "factory", "bean", "was", "missing"]}, {"id": 1400, "code": "\tpublic WebServer getWebServer() {\n\t\treturn getSource();\n\t}", "summary_tokens": ["access", "the", "web", "server"]}, {"id": 1401, "code": "\tpublic WebServer getSource() {\n\t\treturn (WebServer) super.getSource();\n\t}", "summary_tokens": ["access", "the", "source", "of", "the", "event", "an", "web", "server"]}, {"id": 1402, "code": "\tpublic void setServerCustomizers(Collection<? extends JettyServerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.jettyServerCustomizers = new LinkedHashSet<>(customizers);\n\t}", "summary_tokens": ["sets", "jetty", "server", "customizer", "s", "that", "will", "be", "applied", "to", "the", "server", "before", "it", "is", "started"]}, {"id": 1403, "code": "\tpublic Collection<JettyServerCustomizer> getServerCustomizers() {\n\t\treturn this.jettyServerCustomizers;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "jetty", "jetty", "server", "customizer", "s", "that", "will", "be", "applied", "to", "the", "server", "before", "it", "is", "created"]}, {"id": 1404, "code": "\tpublic ThreadPool getThreadPool() {\n\t\treturn this.threadPool;\n\t}", "summary_tokens": ["returns", "a", "jetty", "thread", "pool", "that", "should", "be", "used", "by", "the", "server"]}, {"id": 1405, "code": "\tpublic void setResourceFactory(JettyResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}", "summary_tokens": ["set", "the", "jetty", "resource", "factory", "to", "get", "the", "shared", "resources", "from"]}, {"id": 1406, "code": "\tprotected void configureSsl(SslContextFactory.Server factory, Ssl ssl, SslStoreProvider sslStoreProvider) {\n\t\tfactory.setProtocol(ssl.getProtocol());\n\t\tconfigureSslClientAuth(factory, ssl);\n\t\tconfigureSslPasswords(factory, ssl);\n\t\tfactory.setCertAlias(ssl.getKeyAlias());\n\t\tif (!ObjectUtils.isEmpty(ssl.getCiphers())) {\n\t\t\tfactory.setIncludeCipherSuites(ssl.getCiphers());\n\t\t\tfactory.setExcludeCipherSuites();\n\t\t}\n\t\tif (ssl.getEnabledProtocols() != null) {\n\t\t\tfactory.setIncludeProtocols(ssl.getEnabledProtocols());\n\t\t}\n\t\tif (sslStoreProvider != null) {\n\t\t\ttry {\n\t\t\t\tString keyPassword = sslStoreProvider.getKeyPassword();\n\t\t\t\tif (keyPassword != null) {\n\t\t\t\t\tfactory.setKeyManagerPassword(keyPassword);\n\t\t\t\t}\n\t\t\t\tfactory.setKeyStore(sslStoreProvider.getKeyStore());\n\t\t\t\tfactory.setTrustStore(sslStoreProvider.getTrustStore());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(factory, ssl);\n\t\t\tconfigureSslTrustStore(factory, ssl);\n\t\t}\n\t}", "summary_tokens": ["configure", "the", "ssl", "connection"]}, {"id": 1407, "code": "\tpublic Collection<NettyServerCustomizer> getServerCustomizers() {\n\t\treturn this.serverCustomizers;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "netty", "server", "customizer", "s", "that", "will", "be", "applied", "to", "the", "netty", "server", "builder"]}, {"id": 1408, "code": "\tpublic void setServerCustomizers(Collection<? extends NettyServerCustomizer> serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizers must not be null\");\n\t\tthis.serverCustomizers = new LinkedHashSet<>(serverCustomizers);\n\t}", "summary_tokens": ["set", "netty", "server", "customizer", "s", "that", "should", "be", "applied", "to", "the", "netty", "server", "builder"]}, {"id": 1409, "code": "\tpublic void addServerCustomizers(NettyServerCustomizer... serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizer must not be null\");\n\t\tthis.serverCustomizers.addAll(Arrays.asList(serverCustomizers));\n\t}", "summary_tokens": ["add", "netty", "server", "customizer", "s", "that", "should", "be", "applied", "while", "building", "the", "server"]}, {"id": 1410, "code": "\tpublic void addRouteProviders(NettyRouteProvider... routeProviders) {\n\t\tAssert.notNull(routeProviders, \"NettyRouteProvider must not be null\");\n\t\tthis.routeProviders.addAll(Arrays.asList(routeProviders));\n\t}", "summary_tokens": ["add", "netty", "route", "provider", "s", "that", "should", "be", "applied", "in", "order", "before", "the", "handler", "for", "the", "spring", "application"]}, {"id": 1411, "code": "\tpublic void setLifecycleTimeout(Duration lifecycleTimeout) {\n\t\tthis.lifecycleTimeout = lifecycleTimeout;\n\t}", "summary_tokens": ["set", "the", "maximum", "amount", "of", "time", "that", "should", "be", "waited", "when", "starting", "or", "stopping", "the", "server"]}, {"id": 1412, "code": "\tpublic void setUseForwardHeaders(boolean useForwardHeaders) {\n\t\tthis.useForwardHeaders = useForwardHeaders;\n\t}", "summary_tokens": ["set", "if", "x", "forward", "headers", "should", "be", "processed"]}, {"id": 1413, "code": "\tpublic void setResourceFactory(ReactorResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}", "summary_tokens": ["set", "the", "reactor", "resource", "factory", "to", "get", "the", "shared", "resources", "from"]}, {"id": 1414, "code": "\tprotected void configureSsl(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl, SslStoreProvider sslStoreProvider) {\n\t\tprotocol.setSSLEnabled(true);\n\t\tSSLHostConfig sslHostConfig = new SSLHostConfig();\n\t\tsslHostConfig.setHostName(protocol.getDefaultSSLHostConfigName());\n\t\tsslHostConfig.setSslProtocol(ssl.getProtocol());\n\t\tprotocol.addSslHostConfig(sslHostConfig);\n\t\tconfigureSslClientAuth(sslHostConfig, ssl);\n\t\tSSLHostConfigCertificate certificate = new SSLHostConfigCertificate(sslHostConfig, Type.UNDEFINED);\n\t\tif (ssl.getKeyStorePassword() != null) {\n\t\t\tcertificate.setCertificateKeystorePassword(ssl.getKeyStorePassword());\n\t\t}\n\t\tif (ssl.getKeyPassword() != null) {\n\t\t\tcertificate.setCertificateKeyPassword(ssl.getKeyPassword());\n\t\t}\n\t\tif (ssl.getKeyAlias() != null) {\n\t\t\tcertificate.setCertificateKeyAlias(ssl.getKeyAlias());\n\t\t}\n\t\tsslHostConfig.addCertificate(certificate);\n\t\tString ciphers = StringUtils.arrayToCommaDelimitedString(ssl.getCiphers());\n\t\tif (StringUtils.hasText(ciphers)) {\n\t\t\tsslHostConfig.setCiphers(ciphers);\n\t\t}\n\t\tconfigureEnabledProtocols(protocol, ssl);\n\t\tif (sslStoreProvider != null) {\n\t\t\tconfigureSslStoreProvider(protocol, sslHostConfig, certificate, sslStoreProvider);\n\t\t\tString keyPassword = sslStoreProvider.getKeyPassword();\n\t\t\tif (keyPassword != null) {\n\t\t\t\tcertificate.setCertificateKeyPassword(keyPassword);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(certificate, ssl);\n\t\t\tconfigureSslTrustStore(sslHostConfig, ssl);\n\t\t}\n\t}", "summary_tokens": ["configure", "tomcat", "s", "abstract", "http", "0", "jsse", "protocol", "for", "ssl"]}, {"id": 1415, "code": "\tprotected void configureContext(Context context) {\n\t\tthis.contextLifecycleListeners.forEach(context::addLifecycleListener);\n\t\tnew DisableReferenceClearingContextCustomizer().customize(context);\n\t\tthis.tomcatContextCustomizers.forEach((customizer) -> customizer.customize(context));\n\t}", "summary_tokens": ["configure", "the", "tomcat", "context"]}, {"id": 1416, "code": "\tpublic void setTomcatContextCustomizers(Collection<? extends TomcatContextCustomizer> tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers, \"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers = new LinkedHashSet<>(tomcatContextCustomizers);\n\t}", "summary_tokens": ["set", "tomcat", "context", "customizer", "s", "that", "should", "be", "applied", "to", "the", "tomcat", "context"]}, {"id": 1417, "code": "\tpublic Collection<TomcatContextCustomizer> getTomcatContextCustomizers() {\n\t\treturn this.tomcatContextCustomizers;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "tomcat", "context", "customizer", "s", "that", "will", "be", "applied", "to", "the", "tomcat", "context"]}, {"id": 1418, "code": "\tpublic void addContextCustomizers(TomcatContextCustomizer... tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers, \"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers.addAll(Arrays.asList(tomcatContextCustomizers));\n\t}", "summary_tokens": ["add", "tomcat", "context", "customizer", "s", "that", "should", "be", "added", "to", "the", "tomcat", "context"]}, {"id": 1419, "code": "\tpublic void setTomcatConnectorCustomizers(\n\t\t\tCollection<? extends TomcatConnectorCustomizer> tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers, \"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers = new LinkedHashSet<>(tomcatConnectorCustomizers);\n\t}", "summary_tokens": ["set", "tomcat", "connector", "customizer", "s", "that", "should", "be", "applied", "to", "the", "tomcat", "connector"]}, {"id": 1420, "code": "\tpublic void addConnectorCustomizers(TomcatConnectorCustomizer... tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers, \"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers.addAll(Arrays.asList(tomcatConnectorCustomizers));\n\t}", "summary_tokens": ["add", "tomcat", "connector", "customizer", "s", "that", "should", "be", "added", "to", "the", "tomcat", "connector"]}, {"id": 1421, "code": "\tpublic Collection<TomcatConnectorCustomizer> getTomcatConnectorCustomizers() {\n\t\treturn this.tomcatConnectorCustomizers;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "tomcat", "connector", "customizer", "s", "that", "will", "be", "applied", "to", "the", "tomcat", "connector"]}, {"id": 1422, "code": "\tpublic void setTomcatProtocolHandlerCustomizers(\n\t\t\tCollection<? extends TomcatProtocolHandlerCustomizer<?>> tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers, \"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers = new LinkedHashSet<>(tomcatProtocolHandlerCustomizers);\n\t}", "summary_tokens": ["set", "tomcat", "protocol", "handler", "customizer", "s", "that", "should", "be", "applied", "to", "the", "tomcat", "connector"]}, {"id": 1423, "code": "\tpublic void addProtocolHandlerCustomizers(TomcatProtocolHandlerCustomizer<?>... tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers, \"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers.addAll(Arrays.asList(tomcatProtocolHandlerCustomizers));\n\t}", "summary_tokens": ["add", "tomcat", "protocol", "handler", "customizer", "s", "that", "should", "be", "added", "to", "the", "tomcat", "connector"]}, {"id": 1424, "code": "\tpublic Collection<TomcatProtocolHandlerCustomizer<?>> getTomcatProtocolHandlerCustomizers() {\n\t\treturn this.tomcatProtocolHandlerCustomizers;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "tomcat", "protocol", "handler", "customizer", "s", "that", "will", "be", "applied", "to", "the", "tomcat", "connector"]}, {"id": 1425, "code": "\tpublic void addAdditionalTomcatConnectors(Connector... connectors) {\n\t\tAssert.notNull(connectors, \"Connectors must not be null\");\n\t\tthis.additionalTomcatConnectors.addAll(Arrays.asList(connectors));\n\t}", "summary_tokens": ["add", "connector", "s", "in", "addition", "to", "the", "default", "connector", "e"]}, {"id": 1426, "code": "\tpublic List<Connector> getAdditionalTomcatConnectors() {\n\t\treturn this.additionalTomcatConnectors;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "connector", "s", "that", "will", "be", "added", "to", "the", "tomcat"]}, {"id": 1427, "code": "\tpublic List<Valve> getEngineValves() {\n\t\treturn this.engineValves;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "valve", "s", "that", "will", "be", "applied", "to", "the", "tomcat", "engine"]}, {"id": 1428, "code": "\tpublic void setUriEncoding(Charset uriEncoding) {\n\t\tthis.uriEncoding = uriEncoding;\n\t}", "summary_tokens": ["set", "the", "character", "encoding", "to", "use", "for", "url", "decoding"]}, {"id": 1429, "code": "\tpublic Charset getUriEncoding() {\n\t\treturn this.uriEncoding;\n\t}", "summary_tokens": ["returns", "the", "character", "encoding", "to", "use", "for", "url", "decoding"]}, {"id": 1430, "code": "\tpublic void setContextLifecycleListeners(Collection<? extends LifecycleListener> contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners, \"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners = new ArrayList<>(contextLifecycleListeners);\n\t}", "summary_tokens": ["set", "lifecycle", "listener", "s", "that", "should", "be", "applied", "to", "the", "tomcat", "context"]}, {"id": 1431, "code": "\tpublic Collection<LifecycleListener> getContextLifecycleListeners() {\n\t\treturn this.contextLifecycleListeners;\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "lifecycle", "listener", "s", "that", "will", "be", "applied", "to", "the", "tomcat", "context"]}, {"id": 1432, "code": "\tpublic void addContextLifecycleListeners(LifecycleListener... contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners, \"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners.addAll(Arrays.asList(contextLifecycleListeners));\n\t}", "summary_tokens": ["add", "lifecycle", "listener", "s", "that", "should", "be", "added", "to", "the", "tomcat", "context"]}, {"id": 1433, "code": "\tprotected TomcatWebServer getTomcatWebServer(Tomcat tomcat) {\n\t\treturn new TomcatWebServer(tomcat, getPort() >= 0, getShutdown());\n\t}", "summary_tokens": ["factory", "method", "called", "to", "create", "the", "tomcat", "web", "server"]}, {"id": 1434, "code": "\tpublic void setProtocol(String protocol) {\n\t\tAssert.hasLength(protocol, \"Protocol must not be empty\");\n\t\tthis.protocol = protocol;\n\t}", "summary_tokens": ["the", "tomcat", "protocol", "to", "use", "when", "create", "the", "connector"]}, {"id": 1435, "code": "\tpublic void setDisableMBeanRegistry(boolean disableMBeanRegistry) {\n\t\tthis.disableMBeanRegistry = disableMBeanRegistry;\n\t}", "summary_tokens": ["set", "whether", "the", "factory", "should", "disable", "tomcat", "s", "mbean", "registry", "prior", "to", "creating", "the", "server"]}, {"id": 1436, "code": "\tpublic Collection<UndertowBuilderCustomizer> getBuilderCustomizers() {\n\t\treturn this.delegate.getBuilderCustomizers();\n\t}", "summary_tokens": ["returns", "a", "mutable", "collection", "of", "the", "undertow", "builder", "customizer", "s", "that", "will", "be", "applied", "to", "the", "undertow", "io"]}, {"id": 1437, "code": "\tpublic boolean isIncluded(Include include) {\n\t\treturn this.includes.contains(include);\n\t}", "summary_tokens": ["get", "the", "option", "for", "including", "the", "specified", "attribute", "in", "the", "error", "response"]}, {"id": 1438, "code": "\tpublic Set<Include> getIncludes() {\n\t\treturn this.includes;\n\t}", "summary_tokens": ["get", "all", "options", "for", "including", "attributes", "in", "the", "error", "response"]}, {"id": 1439, "code": "\tpublic ErrorAttributeOptions including(Include... includes) {\n\t\tEnumSet<Include> updated = copyIncludes();\n\t\tupdated.addAll(Arrays.asList(includes));\n\t\treturn new ErrorAttributeOptions(Collections.unmodifiableSet(updated));\n\t}", "summary_tokens": ["return", "an", "error", "attribute", "options", "that", "includes", "the", "specified", "attribute", "include", "options"]}, {"id": 1440, "code": "\tpublic ErrorAttributeOptions excluding(Include... excludes) {\n\t\tEnumSet<Include> updated = copyIncludes();\n\t\tupdated.removeAll(Arrays.asList(excludes));\n\t\treturn new ErrorAttributeOptions(Collections.unmodifiableSet(updated));\n\t}", "summary_tokens": ["return", "an", "error", "attribute", "options", "that", "excludes", "the", "specified", "attribute", "include", "options"]}, {"id": 1441, "code": "\tpublic static ErrorAttributeOptions defaults() {\n\t\treturn of();\n\t}", "summary_tokens": ["create", "an", "error", "attribute", "options", "with", "defaults"]}, {"id": 1442, "code": "\tpublic static ErrorAttributeOptions of(Collection<Include> includes) {\n\t\treturn new ErrorAttributeOptions(\n\t\t\t\t(includes.isEmpty()) ? Collections.emptySet() : Collections.unmodifiableSet(EnumSet.copyOf(includes)));\n\t}", "summary_tokens": ["create", "an", "error", "attribute", "options", "that", "includes", "the", "specified", "attribute", "include", "options"]}, {"id": 1443, "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "summary_tokens": ["p", "delegates", "given", "environment", "to", "underlying", "annotated", "bean", "definition", "reader", "and", "class", "path", "bean", "definition", "scanner", "members"]}, {"id": 1444, "code": "\tpublic void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tgetBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t}", "summary_tokens": ["provide", "a", "custom", "bean", "name", "generator", "for", "use", "with", "annotated", "bean", "definition", "reader", "and", "or", "class", "path", "bean", "definition", "scanner", "if", "any"]}, {"id": 1445, "code": "\tpublic void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {\n\t\tthis.reader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\tthis.scanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t}", "summary_tokens": ["set", "the", "scope", "metadata", "resolver", "to", "use", "for", "detected", "bean", "classes"]}, {"id": 1446, "code": "\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}", "summary_tokens": ["register", "one", "or", "more", "annotated", "classes", "to", "be", "processed"]}, {"id": 1447, "code": "\tpublic final void scan(String... basePackages) {\n\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n\t\tthis.basePackages = basePackages;\n\t}", "summary_tokens": ["perform", "a", "scan", "within", "the", "specified", "base", "packages"]}, {"id": 1448, "code": "\tprotected HttpHandler getHttpHandler() {\n\t\t\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(HttpHandler.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to missing HttpHandler bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to multiple HttpHandler beans : \"\n\t\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], HttpHandler.class);\n\t}", "summary_tokens": ["return", "the", "http", "handler", "that", "should", "be", "used", "to", "process", "the", "reactive", "web", "server"]}, {"id": 1449, "code": "\tpublic WebServer getWebServer() {\n\t\tWebServerManager serverManager = this.serverManager;\n\t\treturn (serverManager != null) ? serverManager.getWebServer() : null;\n\t}", "summary_tokens": ["returns", "the", "web", "server", "that", "was", "created", "by", "the", "context", "or", "null", "if", "the", "server", "has", "not", "yet", "been", "created"]}, {"id": 1450, "code": "\tdefault Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) {\n\t\treturn Collections.emptyMap();\n\t}", "summary_tokens": ["return", "a", "map", "of", "the", "error", "attributes"]}, {"id": 1451, "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "summary_tokens": ["set", "the", "order", "for", "this", "filter"]}, {"id": 1452, "code": "\tpublic void setCompiler(Compiler compiler) {\n\t\tthis.compiler = compiler;\n\t}", "summary_tokens": ["set", "the", "jmustache", "compiler", "to", "be", "used", "by", "this", "view"]}, {"id": 1453, "code": "\tpublic void setCharset(String charset) {\n\t\tthis.charset = charset;\n\t}", "summary_tokens": ["set", "the", "charset", "used", "for", "reading", "mustache", "template", "files"]}, {"id": 1454, "code": "\tpublic int getPort() {\n\t\treturn this.port;\n\t}", "summary_tokens": ["the", "port", "that", "the", "web", "server", "listens", "on"]}, {"id": 1455, "code": "\tpublic InetAddress getAddress() {\n\t\treturn this.address;\n\t}", "summary_tokens": ["return", "the", "address", "that", "the", "web", "server", "binds", "to"]}, {"id": 1456, "code": "\tpublic Set<ErrorPage> getErrorPages() {\n\t\treturn this.errorPages;\n\t}", "summary_tokens": ["returns", "a", "mutable", "set", "of", "error", "page", "error", "pages", "that", "will", "be", "used", "when", "handling", "exceptions"]}, {"id": 1457, "code": "\tpublic Shutdown getShutdown() {\n\t\treturn this.shutdown;\n\t}", "summary_tokens": ["returns", "the", "shutdown", "configuration", "that", "will", "be", "applied", "to", "the", "server"]}, {"id": 1458, "code": "\tpublic final SslStoreProvider getOrCreateSslStoreProvider() {\n\t\tif (this.sslStoreProvider != null) {\n\t\t\treturn this.sslStoreProvider;\n\t\t}\n\t\treturn CertificateFileSslStoreProvider.from(this.ssl);\n\t}", "summary_tokens": ["return", "the", "provided", "ssl", "store", "provider", "or", "create", "one", "using", "ssl", "properties"]}, {"id": 1459, "code": "\tprotected final File createTempDir(String prefix) {\n\t\ttry {\n\t\t\tFile tempDir = Files.createTempDirectory(prefix + \".\" + getPort() + \".\").toFile();\n\t\t\ttempDir.deleteOnExit();\n\t\t\treturn tempDir;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new WebServerException(\n\t\t\t\t\t\"Unable to create tempDir. java.io.tmpdir is set to \" + System.getProperty(\"java.io.tmpdir\"), ex);\n\t\t}\n\t}", "summary_tokens": ["return", "the", "absolute", "temp", "dir", "for", "given", "web", "server"]}, {"id": 1460, "code": "\tprivate KeyStore createKeyStore(String certPath, String keyPath, String storeType, String keyAlias) {\n\t\ttry {\n\t\t\tKeyStore keyStore = KeyStore.getInstance((storeType != null) ? storeType : KeyStore.getDefaultType());\n\t\t\tkeyStore.load(null);\n\t\t\tX509Certificate[] certificates = CertificateParser.parse(certPath);\n\t\t\tPrivateKey privateKey = (keyPath != null) ? PrivateKeyParser.parse(keyPath) : null;\n\t\t\ttry {\n\t\t\t\taddCertificates(keyStore, certificates, privateKey, keyAlias);\n\t\t\t}\n\t\t\tcatch (KeyStoreException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Error adding certificates to KeyStore: \" + ex.getMessage(), ex);\n\t\t\t}\n\t\t\treturn keyStore;\n\t\t}\n\t\tcatch (GeneralSecurityException | IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Error creating KeyStore: \" + ex.getMessage(), ex);\n\t\t}\n\t}", "summary_tokens": ["create", "a", "new", "key", "store", "populated", "with", "the", "certificate", "stored", "at", "the", "specified", "file", "path", "and", "an", "optional", "private", "key"]}, {"id": 1461, "code": "\tpublic static SslStoreProvider from(Ssl ssl) {\n\t\tif (ssl != null && ssl.isEnabled()) {\n\t\t\tif (ssl.getCertificate() != null && ssl.getCertificatePrivateKey() != null) {\n\t\t\t\treturn new CertificateFileSslStoreProvider(ssl);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "summary_tokens": ["create", "an", "ssl", "store", "provider", "if", "the", "appropriate", "ssl", "properties", "are", "configured"]}, {"id": 1462, "code": "\tstatic X509Certificate[] parse(String path) {\n\t\tCertificateFactory factory = getCertificateFactory();\n\t\tList<X509Certificate> certificates = new ArrayList<>();\n\t\treadCertificates(path, factory, certificates::add);\n\t\treturn certificates.toArray(new X509Certificate[0]);\n\t}", "summary_tokens": ["load", "certificates", "from", "the", "specified", "resource"]}, {"id": 1463, "code": "\tpublic boolean getEnabled() {\n\t\treturn this.enabled;\n\t}", "summary_tokens": ["return", "whether", "response", "compression", "is", "enabled"]}, {"id": 1464, "code": "\tpublic String[] getMimeTypes() {\n\t\treturn this.mimeTypes;\n\t}", "summary_tokens": ["return", "the", "mime", "types", "that", "should", "be", "compressed"]}, {"id": 1465, "code": "\tpublic DataSize getMinResponseSize() {\n\t\treturn this.minResponseSize;\n\t}", "summary_tokens": ["return", "the", "minimum", "content", "length", "value", "that", "is", "required", "for", "compression", "to", "be", "performed"]}, {"id": 1466, "code": "\tdefault void setShutdown(Shutdown shutdown) {\n\n\t}", "summary_tokens": ["sets", "the", "shutdown", "configuration", "that", "will", "be", "applied", "to", "the", "server"]}, {"id": 1467, "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}", "summary_tokens": ["return", "whether", "to", "enable", "http", "0", "support", "if", "the", "current", "environment", "supports", "it"]}, {"id": 1468, "code": "\tpublic int getPort() {\n\t\treturn this.port;\n\t}", "summary_tokens": ["returns", "the", "port", "that", "was", "in", "use"]}, {"id": 1469, "code": "\tpublic static void throwIfPortBindingException(Exception ex, IntSupplier port) {\n\t\tifPortBindingException(ex, (bindException) -> {\n\t\t\tthrow new PortInUseException(port.getAsInt(), ex);\n\t\t});\n\t}", "summary_tokens": ["throw", "a", "port", "in", "use", "exception", "if", "the", "given", "exception", "was", "caused", "by", "a", "port", "in", "use", "bind", "exception"]}, {"id": 1470, "code": "\tpublic static void ifPortBindingException(Exception ex, Consumer<BindException> action) {\n\t\tifCausedBy(ex, BindException.class, (bindException) -> {\n\t\t\t\n\t\t\tif (bindException.getMessage().toLowerCase().contains(\"in use\")) {\n\t\t\t\taction.accept(bindException);\n\t\t\t}\n\t\t});\n\t}", "summary_tokens": ["perform", "an", "action", "if", "the", "given", "exception", "was", "caused", "by", "a", "port", "in", "use", "bind", "exception"]}, {"id": 1471, "code": "\tpublic static <E extends Exception> void ifCausedBy(Exception ex, Class<E> causedBy, Consumer<E> action) {\n\t\tThrowable candidate = ex;\n\t\twhile (candidate != null) {\n\t\t\tif (causedBy.isInstance(candidate)) {\n\t\t\t\taction.accept((E) candidate);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcandidate = candidate.getCause();\n\t\t}\n\t}", "summary_tokens": ["perform", "an", "action", "if", "the", "given", "exception", "was", "caused", "by", "a", "specific", "exception", "type"]}, {"id": 1472, "code": "\tstatic PrivateKey parse(String resource) {\n\t\ttry {\n\t\t\tString text = readText(resource);\n\t\t\tMatcher matcher = PKCS1_PATTERN.matcher(text);\n\t\t\tif (matcher.find()) {\n\t\t\t\treturn parsePkcs1(decodeBase64(matcher.group(1)));\n\t\t\t}\n\t\t\tmatcher = PKCS8_KEY_PATTERN.matcher(text);\n\t\t\tif (matcher.find()) {\n\t\t\t\treturn parsePkcs8(decodeBase64(matcher.group(1)));\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"Unrecognized private key format in \" + resource);\n\t\t}\n\t\tcatch (GeneralSecurityException | IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Error loading private key file \" + resource, ex);\n\t\t}\n\t}", "summary_tokens": ["load", "a", "private", "key", "from", "the", "specified", "resource"]}, {"id": 1473, "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}", "summary_tokens": ["return", "whether", "to", "enable", "ssl", "support"]}, {"id": 1474, "code": "\tpublic ClientAuth getClientAuth() {\n\t\treturn this.clientAuth;\n\t}", "summary_tokens": ["return", "whether", "client", "authentication", "is", "not", "wanted", "none", "wanted", "want", "or", "needed", "need"]}, {"id": 1475, "code": "\tpublic String[] getCiphers() {\n\t\treturn this.ciphers;\n\t}", "summary_tokens": ["return", "the", "supported", "ssl", "ciphers"]}, {"id": 1476, "code": "\tpublic String[] getEnabledProtocols() {\n\t\treturn this.enabledProtocols;\n\t}", "summary_tokens": ["return", "the", "enabled", "ssl", "protocols"]}, {"id": 1477, "code": "\tpublic String getKeyAlias() {\n\t\treturn this.keyAlias;\n\t}", "summary_tokens": ["return", "the", "alias", "that", "identifies", "the", "key", "in", "the", "key", "store"]}, {"id": 1478, "code": "\tpublic String getKeyPassword() {\n\t\treturn this.keyPassword;\n\t}", "summary_tokens": ["return", "the", "password", "used", "to", "access", "the", "key", "in", "the", "key", "store"]}, {"id": 1479, "code": "\tpublic String getKeyStore() {\n\t\treturn this.keyStore;\n\t}", "summary_tokens": ["return", "the", "path", "to", "the", "key", "store", "that", "holds", "the", "ssl", "certificate", "typically", "a", "jks", "file"]}, {"id": 1480, "code": "\tpublic String getKeyStorePassword() {\n\t\treturn this.keyStorePassword;\n\t}", "summary_tokens": ["return", "the", "password", "used", "to", "access", "the", "key", "store"]}, {"id": 1481, "code": "\tpublic String getKeyStoreType() {\n\t\treturn this.keyStoreType;\n\t}", "summary_tokens": ["return", "the", "type", "of", "the", "key", "store"]}, {"id": 1482, "code": "\tpublic String getKeyStoreProvider() {\n\t\treturn this.keyStoreProvider;\n\t}", "summary_tokens": ["return", "the", "provider", "for", "the", "key", "store"]}, {"id": 1483, "code": "\tpublic String getTrustStore() {\n\t\treturn this.trustStore;\n\t}", "summary_tokens": ["return", "the", "trust", "store", "that", "holds", "ssl", "certificates"]}, {"id": 1484, "code": "\tpublic String getTrustStorePassword() {\n\t\treturn this.trustStorePassword;\n\t}", "summary_tokens": ["return", "the", "password", "used", "to", "access", "the", "trust", "store"]}, {"id": 1485, "code": "\tpublic String getTrustStoreType() {\n\t\treturn this.trustStoreType;\n\t}", "summary_tokens": ["return", "the", "type", "of", "the", "trust", "store"]}, {"id": 1486, "code": "\tpublic String getTrustStoreProvider() {\n\t\treturn this.trustStoreProvider;\n\t}", "summary_tokens": ["return", "the", "provider", "for", "the", "trust", "store"]}, {"id": 1487, "code": "\tpublic String getCertificate() {\n\t\treturn this.certificate;\n\t}", "summary_tokens": ["return", "the", "location", "of", "the", "certificate", "in", "pem", "format"]}, {"id": 1488, "code": "\tpublic String getCertificatePrivateKey() {\n\t\treturn this.certificatePrivateKey;\n\t}", "summary_tokens": ["return", "the", "location", "of", "the", "private", "key", "for", "the", "certificate", "in", "pem", "format"]}, {"id": 1489, "code": "\tpublic String getTrustCertificate() {\n\t\treturn this.trustCertificate;\n\t}", "summary_tokens": ["return", "the", "location", "of", "the", "trust", "certificate", "authority", "chain", "in", "pem", "format"]}, {"id": 1490, "code": "\tpublic String getTrustCertificatePrivateKey() {\n\t\treturn this.trustCertificatePrivateKey;\n\t}", "summary_tokens": ["return", "the", "location", "of", "the", "private", "key", "for", "the", "trust", "certificate", "in", "pem", "format"]}, {"id": 1491, "code": "\tpublic String getProtocol() {\n\t\treturn this.protocol;\n\t}", "summary_tokens": ["return", "the", "ssl", "protocol", "to", "use"]}, {"id": 1492, "code": "\tdefault String getKeyPassword() {\n\t\treturn null;\n\t}", "summary_tokens": ["return", "the", "password", "of", "the", "private", "key", "in", "the", "key", "store"]}, {"id": 1493, "code": "\tdefault void shutDownGracefully(GracefulShutdownCallback callback) {\n\t\tcallback.shutdownComplete(GracefulShutdownResult.IMMEDIATE);\n\t}", "summary_tokens": ["initiates", "a", "graceful", "shutdown", "of", "the", "web", "server"]}, {"id": 1494, "code": "\tpublic void setServletRegistrationBeans(Collection<? extends ServletRegistrationBean<?>> servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans, \"ServletRegistrationBeans must not be null\");\n\t\tthis.servletRegistrationBeans = new LinkedHashSet<>(servletRegistrationBeans);\n\t}", "summary_tokens": ["set", "servlet", "registration", "bean", "s", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1495, "code": "\tpublic Collection<ServletRegistrationBean<?>> getServletRegistrationBeans() {\n\t\treturn this.servletRegistrationBeans;\n\t}", "summary_tokens": ["return", "a", "mutable", "collection", "of", "the", "servlet", "registration", "bean", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1496, "code": "\tpublic void addServletRegistrationBeans(ServletRegistrationBean<?>... servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans, \"ServletRegistrationBeans must not be null\");\n\t\tCollections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);\n\t}", "summary_tokens": ["add", "servlet", "registration", "bean", "s", "for", "the", "filter"]}, {"id": 1497, "code": "\tpublic void setServletNames(Collection<String> servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames = new LinkedHashSet<>(servletNames);\n\t}", "summary_tokens": ["set", "servlet", "names", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1498, "code": "\tpublic Collection<String> getServletNames() {\n\t\treturn this.servletNames;\n\t}", "summary_tokens": ["return", "a", "mutable", "collection", "of", "servlet", "names", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1499, "code": "\tpublic void addServletNames(String... servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames.addAll(Arrays.asList(servletNames));\n\t}", "summary_tokens": ["add", "servlet", "names", "for", "the", "filter"]}, {"id": 1500, "code": "\tpublic void setUrlPatterns(Collection<String> urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tthis.urlPatterns = new LinkedHashSet<>(urlPatterns);\n\t}", "summary_tokens": ["set", "the", "url", "patterns", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1501, "code": "\tpublic Collection<String> getUrlPatterns() {\n\t\treturn this.urlPatterns;\n\t}", "summary_tokens": ["return", "a", "mutable", "collection", "of", "url", "patterns", "as", "defined", "in", "the", "servlet", "specification", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1502, "code": "\tpublic void addUrlPatterns(String... urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tCollections.addAll(this.urlPatterns, urlPatterns);\n\t}", "summary_tokens": ["add", "url", "patterns", "as", "defined", "in", "the", "servlet", "specification", "that", "the", "filter", "will", "be", "registered", "against"]}, {"id": 1503, "code": "\tpublic void setDispatcherTypes(EnumSet<DispatcherType> dispatcherTypes) {\n\t\tthis.dispatcherTypes = dispatcherTypes;\n\t}", "summary_tokens": ["sets", "the", "dispatcher", "types", "that", "should", "be", "used", "with", "the", "registration"]}, {"id": 1504, "code": "\tpublic void setMatchAfter(boolean matchAfter) {\n\t\tthis.matchAfter = matchAfter;\n\t}", "summary_tokens": ["set", "if", "the", "filter", "mappings", "should", "be", "matched", "after", "any", "declared", "filter", "mappings", "of", "the", "servlet", "context"]}, {"id": 1505, "code": "\tpublic boolean isMatchAfter() {\n\t\treturn this.matchAfter;\n\t}", "summary_tokens": ["return", "if", "filter", "mappings", "should", "be", "matched", "after", "any", "declared", "filter", "mappings", "of", "the", "servlet", "context"]}, {"id": 1506, "code": "\tpublic void setName(String name) {\n\t\tAssert.hasLength(name, \"Name must not be empty\");\n\t\tthis.name = name;\n\t}", "summary_tokens": ["set", "the", "name", "of", "this", "registration"]}, {"id": 1507, "code": "\tpublic void setAsyncSupported(boolean asyncSupported) {\n\t\tthis.asyncSupported = asyncSupported;\n\t}", "summary_tokens": ["sets", "if", "asynchronous", "operations", "are", "supported", "for", "this", "registration"]}, {"id": 1508, "code": "\tpublic boolean isAsyncSupported() {\n\t\treturn this.asyncSupported;\n\t}", "summary_tokens": ["returns", "if", "asynchronous", "operations", "are", "supported", "for", "this", "registration"]}, {"id": 1509, "code": "\tpublic void setInitParameters(Map<String, String> initParameters) {\n\t\tAssert.notNull(initParameters, \"InitParameters must not be null\");\n\t\tthis.initParameters = new LinkedHashMap<>(initParameters);\n\t}", "summary_tokens": ["set", "init", "parameters", "for", "this", "registration"]}, {"id": 1510, "code": "\tpublic Map<String, String> getInitParameters() {\n\t\treturn this.initParameters;\n\t}", "summary_tokens": ["returns", "a", "mutable", "map", "of", "the", "registration", "init", "parameters"]}, {"id": 1511, "code": "\tpublic void addInitParameter(String name, String value) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tthis.initParameters.put(name, value);\n\t}", "summary_tokens": ["add", "a", "single", "init", "parameter", "replacing", "any", "existing", "parameter", "with", "the", "same", "name"]}, {"id": 1512, "code": "\tprotected final String getOrDeduceName(Object value) {\n\t\treturn (this.name != null) ? this.name : Conventions.getVariableName(value);\n\t}", "summary_tokens": ["deduces", "the", "name", "for", "this", "registration"]}, {"id": 1513, "code": "\tpublic void setFilter(T filter) {\n\t\tAssert.notNull(filter, \"Filter must not be null\");\n\t\tthis.filter = filter;\n\t}", "summary_tokens": ["set", "the", "filter", "to", "be", "registered"]}, {"id": 1514, "code": "\tpublic void setLocation(String location) {\n\t\tthis.location = location;\n\t}", "summary_tokens": ["sets", "the", "directory", "location", "where", "files", "will", "be", "stored"]}, {"id": 1515, "code": "\tpublic void setMaxFileSize(DataSize maxFileSize) {\n\t\tthis.maxFileSize = maxFileSize;\n\t}", "summary_tokens": ["sets", "the", "maximum", "data", "size", "size", "allowed", "for", "uploaded", "files"]}, {"id": 1516, "code": "\tpublic void setMaxRequestSize(DataSize maxRequestSize) {\n\t\tthis.maxRequestSize = maxRequestSize;\n\t}", "summary_tokens": ["sets", "the", "maximum", "data", "size", "allowed", "for", "multipart", "form", "data", "requests"]}, {"id": 1517, "code": "\tpublic void setFileSizeThreshold(DataSize fileSizeThreshold) {\n\t\tthis.fileSizeThreshold = fileSizeThreshold;\n\t}", "summary_tokens": ["sets", "the", "data", "size", "size", "threshold", "after", "which", "files", "will", "be", "written", "to", "disk"]}, {"id": 1518, "code": "\tpublic MultipartConfigElement createMultipartConfig() {\n\t\tlong maxFileSizeBytes = convertToBytes(this.maxFileSize, -1);\n\t\tlong maxRequestSizeBytes = convertToBytes(this.maxRequestSize, -1);\n\t\tlong fileSizeThresholdBytes = convertToBytes(this.fileSizeThreshold, 0);\n\t\treturn new MultipartConfigElement(this.location, maxFileSizeBytes, maxRequestSizeBytes,\n\t\t\t\t(int) fileSizeThresholdBytes);\n\t}", "summary_tokens": ["create", "a", "new", "multipart", "config", "element", "instance"]}, {"id": 1519, "code": "\tprivate long convertToBytes(DataSize size, int defaultValue) {\n\t\tif (size != null && !size.isNegative()) {\n\t\t\treturn size.toBytes();\n\t\t}\n\t\treturn defaultValue;\n\t}", "summary_tokens": ["return", "the", "amount", "of", "bytes", "from", "the", "specified", "data", "size", "size"]}, {"id": 1520, "code": "\tpublic void setEnabled(boolean enabled) {\n\t\tthis.enabled = enabled;\n\t}", "summary_tokens": ["flag", "to", "indicate", "that", "the", "registration", "is", "enabled"]}, {"id": 1521, "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}", "summary_tokens": ["return", "if", "the", "registration", "is", "enabled"]}, {"id": 1522, "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "summary_tokens": ["set", "the", "order", "of", "the", "registration", "bean"]}, {"id": 1523, "code": "\tpublic int getOrder() {\n\t\treturn this.order;\n\t}", "summary_tokens": ["get", "the", "order", "of", "the", "registration", "bean"]}, {"id": 1524, "code": "\tpublic void setListener(T listener) {\n\t\tAssert.notNull(listener, \"Listener must not be null\");\n\t\tAssert.isTrue(isSupportedType(listener), \"Listener is not of a supported type\");\n\t\tthis.listener = listener;\n\t}", "summary_tokens": ["set", "the", "listener", "that", "will", "be", "registered"]}, {"id": 1525, "code": "\tpublic T getListener() {\n\t\treturn this.listener;\n\t}", "summary_tokens": ["return", "the", "listener", "to", "be", "registered"]}, {"id": 1526, "code": "\tpublic static boolean isSupportedType(EventListener listener) {\n\t\tfor (Class<?> type : SUPPORTED_TYPES) {\n\t\t\tif (ClassUtils.isAssignableValue(type, listener)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "summary_tokens": ["returns", "true", "if", "the", "specified", "listener", "is", "one", "of", "the", "supported", "types"]}, {"id": 1527, "code": "\tpublic static Set<Class<?>> getSupportedTypes() {\n\t\treturn SUPPORTED_TYPES;\n\t}", "summary_tokens": ["return", "the", "supported", "types", "for", "this", "registration"]}, {"id": 1528, "code": "\tpublic void setServlet(T servlet) {\n\t\tAssert.notNull(servlet, \"Servlet must not be null\");\n\t\tthis.servlet = servlet;\n\t}", "summary_tokens": ["sets", "the", "servlet", "to", "be", "registered"]}, {"id": 1529, "code": "\tpublic T getServlet() {\n\t\treturn this.servlet;\n\t}", "summary_tokens": ["return", "the", "servlet", "being", "registered"]}, {"id": 1530, "code": "\tpublic void setUrlMappings(Collection<String> urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings = new LinkedHashSet<>(urlMappings);\n\t}", "summary_tokens": ["set", "the", "url", "mappings", "for", "the", "servlet"]}, {"id": 1531, "code": "\tpublic Collection<String> getUrlMappings() {\n\t\treturn this.urlMappings;\n\t}", "summary_tokens": ["return", "a", "mutable", "collection", "of", "the", "url", "mappings", "as", "defined", "in", "the", "servlet", "specification", "for", "the", "servlet"]}, {"id": 1532, "code": "\tpublic void addUrlMappings(String... urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings.addAll(Arrays.asList(urlMappings));\n\t}", "summary_tokens": ["add", "url", "mappings", "as", "defined", "in", "the", "servlet", "specification", "for", "the", "servlet"]}, {"id": 1533, "code": "\tpublic void setLoadOnStartup(int loadOnStartup) {\n\t\tthis.loadOnStartup = loadOnStartup;\n\t}", "summary_tokens": ["sets", "the", "load", "on", "startup", "priority"]}, {"id": 1534, "code": "\tpublic void setMultipartConfig(MultipartConfigElement multipartConfig) {\n\t\tthis.multipartConfig = multipartConfig;\n\t}", "summary_tokens": ["set", "the", "multipart", "config", "element", "multi", "part", "configuration"]}, {"id": 1535, "code": "\tpublic MultipartConfigElement getMultipartConfig() {\n\t\treturn this.multipartConfig;\n\t}", "summary_tokens": ["returns", "the", "multipart", "config", "element", "multi", "part", "configuration", "to", "be", "applied", "or", "null"]}, {"id": 1536, "code": "\tpublic String getServletName() {\n\t\treturn getOrDeduceName(this.servlet);\n\t}", "summary_tokens": ["returns", "the", "servlet", "name", "that", "will", "be", "registered"]}, {"id": 1537, "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "summary_tokens": ["p", "delegates", "given", "environment", "to", "underlying", "annotated", "bean", "definition", "reader", "and", "class", "path", "bean", "definition", "scanner", "members"]}, {"id": 1538, "code": "\tpublic void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tgetBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t}", "summary_tokens": ["provide", "a", "custom", "bean", "name", "generator", "for", "use", "with", "annotated", "bean", "definition", "reader", "and", "or", "class", "path", "bean", "definition", "scanner", "if", "any"]}, {"id": 1539, "code": "\tpublic void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {\n\t\tthis.reader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\tthis.scanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t}", "summary_tokens": ["set", "the", "scope", "metadata", "resolver", "to", "use", "for", "detected", "bean", "classes"]}, {"id": 1540, "code": "\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}", "summary_tokens": ["register", "one", "or", "more", "annotated", "classes", "to", "be", "processed"]}, {"id": 1541, "code": "\tpublic final void scan(String... basePackages) {\n\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n\t\tthis.basePackages = basePackages;\n\t}", "summary_tokens": ["perform", "a", "scan", "within", "the", "specified", "base", "packages"]}, {"id": 1542, "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "summary_tokens": ["p", "delegates", "given", "environment", "to", "underlying", "annotated", "bean", "definition", "reader", "and", "class", "path", "bean", "definition", "scanner", "members"]}, {"id": 1543, "code": "\tpublic void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tgetBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t}", "summary_tokens": ["provide", "a", "custom", "bean", "name", "generator", "for", "use", "with", "annotated", "bean", "definition", "reader", "and", "or", "class", "path", "bean", "definition", "scanner", "if", "any"]}, {"id": 1544, "code": "\tpublic void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {\n\t\tthis.reader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\tthis.scanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t}", "summary_tokens": ["set", "the", "scope", "metadata", "resolver", "to", "use", "for", "detected", "bean", "classes"]}, {"id": 1545, "code": "\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}", "summary_tokens": ["register", "one", "or", "more", "annotated", "classes", "to", "be", "processed"]}, {"id": 1546, "code": "\tpublic final void scan(String... basePackages) {\n\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n\t\tthis.basePackages = basePackages;\n\t}", "summary_tokens": ["perform", "a", "scan", "within", "the", "specified", "base", "packages"]}, {"id": 1547, "code": "\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tbeanFactory.addBeanPostProcessor(new WebApplicationContextServletContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(ServletContextAware.class);\n\t\tregisterWebApplicationScopes();\n\t}", "summary_tokens": ["register", "servlet", "context", "aware", "processor"]}, {"id": 1548, "code": "\tprotected ServletWebServerFactory getWebServerFactory() {\n\t\t\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new MissingWebServerFactoryBeanException(getClass(), ServletWebServerFactory.class,\n\t\t\t\t\tWebApplicationType.SERVLET);\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start ServletWebServerApplicationContext due to multiple \"\n\t\t\t\t\t+ \"ServletWebServerFactory beans : \" + StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], ServletWebServerFactory.class);\n\t}", "summary_tokens": ["returns", "the", "servlet", "web", "server", "factory", "that", "should", "be", "used", "to", "create", "the", "embedded", "web", "server"]}, {"id": 1549, "code": "\tprivate org.springframework.boot.web.servlet.ServletContextInitializer getSelfInitializer() {\n\t\treturn this::selfInitialize;\n\t}", "summary_tokens": ["returns", "the", "servlet", "context", "initializer", "that", "will", "be", "used", "to", "complete", "the", "setup", "of", "this", "web", "application", "context"]}, {"id": 1550, "code": "\tprotected Collection<ServletContextInitializer> getServletContextInitializerBeans() {\n\t\treturn new ServletContextInitializerBeans(getBeanFactory());\n\t}", "summary_tokens": ["returns", "servlet", "context", "initializer", "s", "that", "should", "be", "used", "with", "the", "embedded", "web", "server"]}, {"id": 1551, "code": "\tprotected void prepareWebApplicationContext(ServletContext servletContext) {\n\t\tObject rootContext = servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\tif (rootContext != null) {\n\t\t\tif (rootContext == this) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \"\n\t\t\t\t\t\t\t\t+ \"check whether you have multiple ServletContextInitializers!\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tservletContext.log(\"Initializing Spring embedded WebApplicationContext\");\n\t\ttry {\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Published root WebApplicationContext as ServletContext attribute with name [\"\n\t\t\t\t\t\t+ WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + \"]\");\n\t\t\t}\n\t\t\tsetServletContext(servletContext);\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlong elapsedTime = System.currentTimeMillis() - getStartupDate();\n\t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \" + elapsedTime + \" ms\");\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException | Error ex) {\n\t\t\tlogger.error(\"Context initialization failed\", ex);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t}", "summary_tokens": ["prepare", "the", "web", "application", "context", "with", "the", "given", "fully", "loaded", "servlet", "context"]}, {"id": 1552, "code": "\tpublic WebServer getWebServer() {\n\t\treturn this.webServer;\n\t}", "summary_tokens": ["returns", "the", "web", "server", "that", "was", "created", "by", "the", "context", "or", "null", "if", "the", "server", "has", "not", "yet", "been", "created"]}, {"id": 1553, "code": "\tpublic ServletWebServerApplicationContext getApplicationContext() {\n\t\treturn this.applicationContext;\n\t}", "summary_tokens": ["access", "the", "application", "context", "that", "the", "server", "was", "created", "in"]}, {"id": 1554, "code": "\tpublic void setValidating(boolean validating) {\n\t\tthis.reader.setValidating(validating);\n\t}", "summary_tokens": ["set", "whether", "to", "use", "xml", "validation"]}, {"id": 1555, "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(getEnvironment());\n\t}", "summary_tokens": ["p", "delegates", "the", "given", "environment", "to", "underlying", "xml", "bean", "definition", "reader"]}, {"id": 1556, "code": "\tpublic final void load(Class<?> relativeClass, String... resourceNames) {\n\t\tResource[] resources = new Resource[resourceNames.length];\n\t\tfor (int i = 0; i < resourceNames.length; i++) {\n\t\t\tresources[i] = new ClassPathResource(resourceNames[i], relativeClass);\n\t\t}\n\t\tthis.reader.loadBeanDefinitions(resources);\n\t}", "summary_tokens": ["load", "bean", "definitions", "from", "the", "given", "xml", "resources"]}, {"id": 1557, "code": "\tdefault Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {\n\t\treturn Collections.emptyMap();\n\t}", "summary_tokens": ["returns", "a", "map", "of", "the", "error", "attributes"]}, {"id": 1558, "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "summary_tokens": ["set", "the", "order", "for", "this", "filter"]}, {"id": 1559, "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "summary_tokens": ["set", "the", "order", "for", "this", "filter"]}, {"id": 1560, "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "summary_tokens": ["set", "the", "order", "for", "this", "filter"]}, {"id": 1561, "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}", "summary_tokens": ["set", "the", "order", "for", "this", "filter"]}, {"id": 1562, "code": "\tpublic String getContextPath() {\n\t\treturn this.contextPath;\n\t}", "summary_tokens": ["returns", "the", "context", "path", "for", "the", "web", "server"]}, {"id": 1563, "code": "\tpublic boolean isRegisterDefaultServlet() {\n\t\treturn this.registerDefaultServlet;\n\t}", "summary_tokens": ["flag", "to", "indicate", "that", "the", "default", "servlet", "should", "be", "registered"]}, {"id": 1564, "code": "\tpublic MimeMappings getMimeMappings() {\n\t\treturn this.mimeMappings;\n\t}", "summary_tokens": ["returns", "the", "mime", "type", "mappings"]}, {"id": 1565, "code": "\tpublic File getDocumentRoot() {\n\t\treturn this.documentRoot.getDirectory();\n\t}", "summary_tokens": ["returns", "the", "document", "root", "which", "will", "be", "used", "by", "the", "web", "context", "to", "serve", "static", "files"]}, {"id": 1566, "code": "\tpublic Map<Locale, Charset> getLocaleCharsetMappings() {\n\t\treturn this.localeCharsetMappings;\n\t}", "summary_tokens": ["return", "the", "locale", "to", "charset", "mappings"]}, {"id": 1567, "code": "\tprotected final ServletContextInitializer[] mergeInitializers(ServletContextInitializer... initializers) {\n\t\tList<ServletContextInitializer> mergedInitializers = new ArrayList<>();\n\t\tmergedInitializers.add((servletContext) -> this.initParameters.forEach(servletContext::setInitParameter));\n\t\tmergedInitializers.add(new SessionConfiguringInitializer(this.session));\n\t\tmergedInitializers.addAll(Arrays.asList(initializers));\n\t\tmergedInitializers.addAll(this.initializers);\n\t\treturn mergedInitializers.toArray(new ServletContextInitializer[0]);\n\t}", "summary_tokens": ["utility", "method", "that", "can", "be", "used", "by", "subclasses", "wishing", "to", "combine", "the", "specified", "servlet", "context", "initializer", "parameters", "with", "those", "defined", "in", "this", "instance"]}, {"id": 1568, "code": "\tprotected boolean shouldRegisterJspServlet() {\n\t\treturn this.jsp != null && this.jsp.getRegistered()\n\t\t\t\t&& ClassUtils.isPresent(this.jsp.getClassName(), getClass().getClassLoader());\n\t}", "summary_tokens": ["returns", "whether", "the", "jsp", "servlet", "should", "be", "registered", "with", "the", "web", "server"]}, {"id": 1569, "code": "\tprotected final File getValidDocumentRoot() {\n\t\treturn this.documentRoot.getValidDirectory();\n\t}", "summary_tokens": ["returns", "the", "absolute", "document", "root", "when", "it", "points", "to", "a", "valid", "directory", "logging", "a", "warning", "and", "returning", "null", "otherwise"]}, {"id": 1570, "code": "\tdefault CookieSameSiteSupplier whenHasName(Supplier<String> nameSupplier) {\n\t\tAssert.notNull(nameSupplier, \"NameSupplier must not be empty\");\n\t\treturn when((cookie) -> ObjectUtils.nullSafeEquals(cookie.getName(), nameSupplier.get()));\n\t}", "summary_tokens": ["limit", "this", "supplier", "so", "that", "it", "s", "only", "called", "if", "the", "cookie", "has", "the", "given", "name"]}, {"id": 1571, "code": "\tdefault CookieSameSiteSupplier whenHasNameMatching(Pattern pattern) {\n\t\tAssert.notNull(pattern, \"Pattern must not be null\");\n\t\treturn when((cookie) -> pattern.matcher(cookie.getName()).matches());\n\t}", "summary_tokens": ["limit", "this", "supplier", "so", "that", "it", "s", "only", "called", "if", "the", "cookie", "name", "matches", "the", "given", "pattern"]}, {"id": 1572, "code": "\tdefault CookieSameSiteSupplier when(Predicate<Cookie> predicate) {\n\t\tAssert.notNull(predicate, \"Predicate must not be null\");\n\t\treturn (cookie) -> predicate.test(cookie) ? getSameSite(cookie) : null;\n\t}", "summary_tokens": ["limit", "this", "supplier", "so", "that", "it", "s", "only", "called", "if", "the", "predicate", "accepts", "the", "cookie"]}, {"id": 1573, "code": "\tstatic CookieSameSiteSupplier ofNone() {\n\t\treturn of(SameSite.NONE);\n\t}", "summary_tokens": ["return", "a", "new", "cookie", "same", "site", "supplier", "that", "always", "returns", "same", "site", "none"]}, {"id": 1574, "code": "\tstatic CookieSameSiteSupplier ofLax() {\n\t\treturn of(SameSite.LAX);\n\t}", "summary_tokens": ["return", "a", "new", "cookie", "same", "site", "supplier", "that", "always", "returns", "same", "site", "lax"]}, {"id": 1575, "code": "\tstatic CookieSameSiteSupplier ofStrict() {\n\t\treturn of(SameSite.STRICT);\n\t}", "summary_tokens": ["return", "a", "new", "cookie", "same", "site", "supplier", "that", "always", "returns", "same", "site", "strict"]}, {"id": 1576, "code": "\tstatic CookieSameSiteSupplier of(SameSite sameSite) {\n\t\tAssert.notNull(sameSite, \"SameSite must not be null\");\n\t\treturn (cookie) -> sameSite;\n\t}", "summary_tokens": ["return", "a", "new", "cookie", "same", "site", "supplier", "that", "always", "returns", "the", "given", "same", "site", "value"]}, {"id": 1577, "code": "\tpublic String getClassName() {\n\t\treturn this.className;\n\t}", "summary_tokens": ["return", "the", "class", "name", "of", "the", "servlet", "to", "use", "for", "jsps"]}, {"id": 1578, "code": "\tpublic Map<String, String> getInitParameters() {\n\t\treturn this.initParameters;\n\t}", "summary_tokens": ["return", "the", "init", "parameters", "used", "to", "configure", "the", "jsp", "servlet"]}, {"id": 1579, "code": "\tpublic boolean getRegistered() {\n\t\treturn this.registered;\n\t}", "summary_tokens": ["return", "whether", "the", "jsp", "servlet", "is", "registered"]}, {"id": 1580, "code": "\tpublic Set<Session.SessionTrackingMode> getTrackingModes() {\n\t\treturn this.trackingModes;\n\t}", "summary_tokens": ["return", "the", "session", "tracking", "mode", "session", "tracking", "modes"]}, {"id": 1581, "code": "\tpublic boolean isPersistent() {\n\t\treturn this.persistent;\n\t}", "summary_tokens": ["return", "whether", "to", "persist", "session", "data", "between", "restarts"]}, {"id": 1582, "code": "\tpublic File getStoreDir() {\n\t\treturn this.storeDir;\n\t}", "summary_tokens": ["return", "the", "directory", "used", "to", "store", "session", "data"]}, {"id": 1583, "code": "\tpublic void setCompiler(Compiler compiler) {\n\t\tthis.compiler = compiler;\n\t}", "summary_tokens": ["set", "the", "mustache", "compiler", "to", "be", "used", "by", "this", "view"]}, {"id": 1584, "code": "\tpublic void setCharset(String charset) {\n\t\tthis.charset = charset;\n\t}", "summary_tokens": ["set", "the", "charset", "used", "for", "reading", "mustache", "template", "files"]}, {"id": 1585, "code": "\tpublic HttpWebServiceMessageSenderBuilder setConnectTimeout(Duration connectTimeout) {\n\t\tthis.connectTimeout = connectTimeout;\n\t\treturn this;\n\t}", "summary_tokens": ["set", "the", "connection", "timeout"]}, {"id": 1586, "code": "\tpublic HttpWebServiceMessageSenderBuilder setReadTimeout(Duration readTimeout) {\n\t\tthis.readTimeout = readTimeout;\n\t\treturn this;\n\t}", "summary_tokens": ["set", "the", "read", "timeout"]}, {"id": 1587, "code": "\tpublic HttpWebServiceMessageSenderBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier, \"RequestFactory Supplier must not be null\");\n\t\tthis.requestFactorySupplier = requestFactorySupplier;\n\t\treturn this;\n\t}", "summary_tokens": ["set", "the", "supplier", "of", "client", "http", "request", "factory", "that", "should", "be", "called", "to", "create", "the", "http", "based", "web", "service", "message", "sender"]}, {"id": 1588, "code": "\tpublic WebServiceTemplateBuilder detectHttpMessageSender(boolean detectHttpMessageSender) {\n\t\treturn new WebServiceTemplateBuilder(detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "if", "a", "suitable", "http", "based", "web", "service", "message", "sender", "should", "be", "detected", "based", "on", "the", "classpath"]}, {"id": 1589, "code": "\tpublic WebServiceTemplateBuilder messageSenders(Collection<? extends WebServiceMessageSender> messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders.set(messageSenders), this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["sets", "the", "web", "service", "message", "sender", "web", "service", "message", "senders", "that", "should", "be", "used", "with", "the", "web", "service", "template"]}, {"id": 1590, "code": "\tpublic WebServiceTemplateBuilder additionalMessageSenders(\n\t\t\tCollection<? extends WebServiceMessageSender> messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders.add(messageSenders), this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["add", "additional", "web", "service", "message", "sender", "web", "service", "message", "senders", "that", "should", "be", "used", "with", "the", "web", "service", "template"]}, {"id": 1591, "code": "\tpublic WebServiceTemplateBuilder interceptors(Collection<? extends ClientInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tappend(Collections.<ClientInterceptor>emptySet(), interceptors), this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "the", "client", "interceptor", "client", "interceptors", "that", "should", "be", "used", "with", "the", "web", "service", "template"]}, {"id": 1592, "code": "\tpublic WebServiceTemplateBuilder additionalInterceptors(Collection<? extends ClientInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, append(this.interceptors, interceptors),\n\t\t\t\tthis.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["add", "additional", "client", "interceptor", "client", "interceptors", "that", "should", "be", "used", "with", "the", "web", "service", "template"]}, {"id": 1593, "code": "\tpublic WebServiceTemplateBuilder customizers(Collection<? extends WebServiceTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tappend(Collections.<WebServiceTemplateCustomizer>emptySet(), customizers), this.messageSenders,\n\t\t\t\tthis.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "summary_tokens": ["set", "web", "service", "template", "customizer", "web", "service", "template", "customizers", "that", "should", "be", "applied", "to", "the", "web", "service", "template"]}, {"id": 1594, "code": "\tpublic WebServiceTemplateBuilder additionalCustomizers(\n\t\t\tCollection<? extends WebServiceTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tappend(this.customizers, customizers), this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["add", "additional", "web", "service", "template", "customizer", "web", "service", "template", "customizers", "that", "should", "be", "applied", "to", "the", "web", "service", "template"]}, {"id": 1595, "code": "\tpublic WebServiceTemplateBuilder setCheckConnectionForFault(boolean checkConnectionForFault) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors,\n\t\t\t\tappend(this.internalCustomizers, new CheckConnectionFaultCustomizer(checkConnectionForFault)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["indicates", "whether", "the", "connection", "should", "be", "checked", "for", "fault", "indicators", "true", "or", "whether", "we", "should", "rely", "on", "the", "message", "only", "false"]}, {"id": 1596, "code": "\tpublic WebServiceTemplateBuilder setCheckConnectionForError(boolean checkConnectionForError) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors,\n\t\t\t\tappend(this.internalCustomizers, new CheckConnectionForErrorCustomizer(checkConnectionForError)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["indicates", "whether", "the", "connection", "should", "be", "checked", "for", "error", "indicators", "true", "or", "whether", "these", "should", "be", "ignored", "false"]}, {"id": 1597, "code": "\tpublic WebServiceTemplateBuilder setWebServiceMessageFactory(WebServiceMessageFactory messageFactory) {\n\t\tAssert.notNull(messageFactory, \"MessageFactory must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, messageFactory);\n\t}", "summary_tokens": ["sets", "the", "web", "service", "message", "factory", "to", "use", "for", "creating", "messages"]}, {"id": 1598, "code": "\tpublic WebServiceTemplateBuilder setUnmarshaller(Unmarshaller unmarshaller) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "the", "unmarshaller", "to", "use", "to", "deserialize", "messages"]}, {"id": 1599, "code": "\tpublic WebServiceTemplateBuilder setMarshaller(Marshaller marshaller) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "the", "marshaller", "to", "use", "to", "serialize", "messages"]}, {"id": 1600, "code": "\tpublic WebServiceTemplateBuilder setFaultMessageResolver(FaultMessageResolver faultMessageResolver) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors,\n\t\t\t\tappend(this.internalCustomizers, new FaultMessageResolverCustomizer(faultMessageResolver)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "the", "fault", "message", "resolver", "to", "use"]}, {"id": 1601, "code": "\tpublic WebServiceTemplateBuilder setTransformerFactoryClass(\n\t\t\tClass<? extends TransformerFactory> transformerFactoryClass) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\ttransformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "the", "transformer", "factory", "implementation", "to", "use"]}, {"id": 1602, "code": "\tpublic WebServiceTemplateBuilder setDefaultUri(String defaultUri) {\n\t\tAssert.hasText(defaultUri, \"DefaultUri must not be empty\");\n\t\treturn setDestinationProvider(() -> URI.create(defaultUri));\n\t}", "summary_tokens": ["set", "the", "default", "uri", "to", "be", "used", "on", "operations", "that", "do", "not", "have", "a", "uri", "parameter"]}, {"id": 1603, "code": "\tpublic WebServiceTemplateBuilder setDestinationProvider(DestinationProvider destinationProvider) {\n\t\tAssert.notNull(destinationProvider, \"DestinationProvider must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "summary_tokens": ["set", "the", "destination", "provider", "to", "use"]}, {"id": 1604, "code": "\tpublic <T extends WebServiceTemplate> T build(Class<T> webServiceTemplateClass) {\n\t\tAssert.notNull(webServiceTemplateClass, \"WebServiceTemplateClass must not be null\");\n\t\treturn configure(BeanUtils.instantiateClass(webServiceTemplateClass));\n\t}", "summary_tokens": ["build", "a", "new", "web", "service", "template", "instance", "of", "the", "specified", "type", "and", "configure", "it", "using", "this", "builder"]}, {"id": 1605, "code": "\tpublic <T extends WebServiceTemplate> T configure(T webServiceTemplate) {\n\t\tAssert.notNull(webServiceTemplate, \"WebServiceTemplate must not be null\");\n\t\tconfigureMessageSenders(webServiceTemplate);\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tapplyCustomizers(webServiceTemplate, this.internalCustomizers);\n\t\tmap.from(this.marshaller).to(webServiceTemplate::setMarshaller);\n\t\tmap.from(this.unmarshaller).to(webServiceTemplate::setUnmarshaller);\n\t\tmap.from(this.destinationProvider).to(webServiceTemplate::setDestinationProvider);\n\t\tmap.from(this.transformerFactoryClass).to(webServiceTemplate::setTransformerFactoryClass);\n\t\tmap.from(this.messageFactory).to(webServiceTemplate::setMessageFactory);\n\t\tif (!CollectionUtils.isEmpty(this.interceptors)) {\n\t\t\tSet<ClientInterceptor> merged = new LinkedHashSet<>(this.interceptors);\n\t\t\tif (webServiceTemplate.getInterceptors() != null) {\n\t\t\t\tmerged.addAll(Arrays.asList(webServiceTemplate.getInterceptors()));\n\t\t\t}\n\t\t\twebServiceTemplate.setInterceptors(merged.toArray(new ClientInterceptor[0]));\n\t\t}\n\t\tapplyCustomizers(webServiceTemplate, this.customizers);\n\t\treturn webServiceTemplate;\n\t}", "summary_tokens": ["configure", "the", "provided", "web", "service", "template", "instance", "using", "this", "builder"]}, {"id": 1606, "code": "\tpublic static String getVersion() {\n\t\treturn \"${springBootVersion}\";\n\t}", "summary_tokens": ["return", "the", "full", "version", "string", "of", "the", "present", "spring", "boot", "codebase"]}, {"id": 1607, "code": "\tprivate void removeSystemProperties() {\n\t\tMutablePropertySources sources = this.context.getEnvironment().getPropertySources();\n\t\tsources.remove(\"systemProperties\");\n\t\tsources.remove(\"systemEnvironment\");\n\t}", "summary_tokens": ["strict", "tests", "need", "a", "known", "set", "of", "properties", "so", "we", "remove", "system", "items", "which", "may", "be", "environment", "specific"]}, {"id": 1608, "code": "\tpublic static BootstrapRegistryInitializer withCustomClient(\n\t\t\tFunction<SubversionServerCertificate, SubversionClient> clientFactory) {\n\t\treturn (registry) -> registry.register(SubversionClient.class,\n\t\t\t\t(bootstrapContext) -> createSubversionClient(bootstrapContext, clientFactory));\n\t}", "summary_tokens": ["return", "a", "bootstrap", "registry", "initializer", "for", "the", "given", "client", "factory"]}]